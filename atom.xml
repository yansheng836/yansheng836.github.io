<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荷塘月色的博客</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yansheng836.github.io/"/>
  <updated>2022-08-11T15:34:10.111Z</updated>
  <id>https://yansheng836.github.io/</id>
  
  <author>
    <name>荷塘月色</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PostgreSQL视图和物化视图</title>
    <link href="https://yansheng836.github.io/article/43e9ecd8.html"/>
    <id>https://yansheng836.github.io/article/43e9ecd8.html</id>
    <published>2022-05-01T06:47:24.000Z</published>
    <updated>2022-08-11T15:34:10.111Z</updated>
    
    <content type="html"><![CDATA[<p>我们常用说的视图一般是指 view，即普通视图；而物化视图则是materialized  view（materialized 使物质化，使具体化（materialize 的过去式和过去分词））。两者都是视图，但是名称不一样，说明两者还有有所差异的。下面就来简单介绍一下PostgreSQL中的视图和物化视图的差异。</p><a id="more"></a><h2 id="1-视图">1.视图</h2><p>对标实体表，视图其实是个虚拟的表，实际上一个SQL拼接而成的虚拟表（假表），可能是有一个表或者多个表、视图关联而成的复杂的SQL，而这个SQL一般都是select语句（当然也可能是 update、delete 等的语句，但是可能会有诸多限制，而且用视图进行这些操作也不安全，一般也不会这么用，这些不在本文讨论范围内。）。而视图的用途常常用于展示一些用户需要的信息，隐藏一些敏感或者是不重要的数据，汇总一些关键数据展示给用户。</p><p>操作：可以像表一样查询视图的字段，也可以当做一个表进行关联查询。<br>查询底层实现：通过创建视图的语句进行查询，就是每次实时查询底层的表，数据都是实时的。<br>索引：走表的索引。</p><h2 id="2-物化视图">2.物化视图</h2><p>基本功能和视图类型。对标实体表和普通视图，会比普通视图更像一个表。上面说到视图是一个虚拟的表，这个物化视图其实是一个物理表，它可以用自己的索引。</p><p>操作：可以像表一样查询视图的字段，也可以当做一个表进行关联查询。可以创建索引。<br>查询底层实现：创建后就真的被当做是表了，即结果都物化（固化）成了一个表，假如创建语句的底层表数据有变化，也不会影响到这个物化视图的数据，除非手动进行刷新。就是每次查询的都是固化的数据，不是实时的数据。<br>索引：走自己的索引，可以创建索引。</p><h2 id="3-视图和物化视图的对比">3.视图和物化视图的对比</h2><table><thead><tr><th>类型\对比项</th><th>物理结构</th><th>时效性</th><th>有无索引</th></tr></thead><tbody><tr><td>视图</td><td>虚拟表</td><td>实时</td><td>无索引</td></tr><tr><td>物化视图</td><td>物理表</td><td>非实时</td><td>可以创建索引</td></tr></tbody></table><h2 id="4-示例：查询系统的用户表">4.示例：查询系统的用户表</h2><p>基础查询如下，后面我们会使用这个SQL来构造视图和物化视图。<br>（简单介绍下pg_class ：pgsql里面的一个内置系统表，是一个统计或者说是汇总的数据表。class就是类、对象，即pgsql里面的对象都会在这里面记录，比如实体表、视图、物化视图、索引、toast表等，详细信息可以查看官方文档。）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_class <span class="keyword">where</span> relnamespace != <span class="string">'11'</span> <span class="keyword">and</span> relnamespace != <span class="string">'13887'</span>  <span class="keyword">and</span> relkind = <span class="string">'r'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个表，备用</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Sheet4(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int8</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询该表的基础信息（元数据信息）</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_class <span class="keyword">where</span> relnamespace != <span class="string">'11'</span> <span class="keyword">and</span> relnamespace != <span class="string">'13887'</span>  <span class="keyword">and</span> relkind = <span class="string">'r'</span> <span class="keyword">and</span>  relname = <span class="string">'Sheet4'</span>;</span><br></pre></td></tr></table></figure><p><img src="assets/baea60992c074e12b16883a688a38e63.png" alt="在这里插入图片描述"></p><h3 id="4-1-视图">4.1 视图</h3><h4 id="4-1-1-创建视图">4.1.1 创建视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="string">"public"</span>.<span class="string">"v_user_tab"</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_class <span class="keyword">where</span> relnamespace != <span class="string">'11'</span> <span class="keyword">and</span> relnamespace != <span class="string">'13887'</span>  <span class="keyword">and</span> relkind = <span class="string">'r'</span>;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-使用视图">4.1.2 使用视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v_user_tab;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v_user_tab <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br></pre></td></tr></table></figure><p><img src="assets/baea60992c074e12b16883a688a38e63.png" alt="在这里插入图片描述"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关联查询，找命名空间是啥（public默认的）</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_namespace;</span><br><span class="line"><span class="keyword">select</span> ns.nspname,vt.* <span class="keyword">from</span> v_user_tab vt <span class="keyword">left</span> <span class="keyword">join</span>  pg_namespace ns <span class="keyword">on</span> vt.relnamespace = ns.oid;</span><br><span class="line"><span class="keyword">select</span> ns.nspname,vt.* <span class="keyword">from</span> v_user_tab vt <span class="keyword">left</span> <span class="keyword">join</span>  pg_namespace ns <span class="keyword">on</span> vt.relnamespace = ns.oid <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br></pre></td></tr></table></figure><p><img src="assets/4ded55ea13214de9b7d15531224c12c3.png" alt="在这里插入图片描述"></p><h4 id="4-1-3-查看视图的执行计划">4.1.3 查看视图的执行计划</h4><p>查看索引使用情况：上面提到了，实际上走的是底层的查询，索引走的也是原来基础表上的索引。下面我们来看下是不是。（注意一下，因为pgsql规则器有自己的考量，有时候即使有索引也不一定会走，和具体的表记录和查询语句有关系。因此可能explain结果和本文可能会有点不一致。）</p><p>通过计划可以看到这个表名的简单SQL，使用了系统表 pg_class  上的索引 pg_class_relname_nsp_index 。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> v_user_tab <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br><span class="line"></span><br><span class="line">Index Scan using pg_class_relname_nsp_index on pg_class  (cost=0.28..8.31 rows=1 width=271)</span><br><span class="line">  Index Cond: (relname = 'Sheet4'::name)</span><br><span class="line">  Filter: ((relnamespace &lt;&gt; '11'::oid) AND (relnamespace &lt;&gt; '13887'::oid) AND (relkind = 'r'::"char"))</span><br></pre></td></tr></table></figure><p>下面这个使用了，两个索引：pg_class.pg_class_relname_nsp_index 和pg_namespace.pg_namespace_oid_index 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> ns.nspname,vt.* <span class="keyword">from</span> v_user_tab vt <span class="keyword">left</span> <span class="keyword">join</span>  pg_namespace ns <span class="keyword">on</span> vt.relnamespace = ns.oid <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Merge</span> <span class="keyword">Left</span> <span class="keyword">Join</span>  (<span class="keyword">cost</span>=<span class="number">0.43</span>.<span class="number">.12</span><span class="number">.02</span> <span class="keyword">rows</span>=<span class="number">1</span> width=<span class="number">335</span>)</span><br><span class="line">  <span class="keyword">Merge</span> Cond: (pg_class.relnamespace = ns.oid)</span><br><span class="line">  -&gt;  <span class="keyword">Index</span> <span class="keyword">Scan</span> <span class="keyword">using</span> pg_class_relname_nsp_index <span class="keyword">on</span> pg_class  (<span class="keyword">cost</span>=<span class="number">0.28</span>.<span class="number">.8</span><span class="number">.31</span> <span class="keyword">rows</span>=<span class="number">1</span> width=<span class="number">271</span>)</span><br><span class="line">        <span class="keyword">Index</span> Cond: (relname = <span class="string">'Sheet4'</span>::<span class="keyword">name</span>)</span><br><span class="line">        Filter: ((relnamespace &lt;&gt; <span class="string">'11'</span>::<span class="keyword">oid</span>) <span class="keyword">AND</span> (relnamespace &lt;&gt; <span class="string">'13887'</span>::<span class="keyword">oid</span>) <span class="keyword">AND</span> (relkind = <span class="string">'r'</span>::<span class="string">"char"</span>))</span><br><span class="line">  -&gt;  <span class="keyword">Index</span> <span class="keyword">Scan</span> <span class="keyword">using</span> pg_namespace_oid_index <span class="keyword">on</span> pg_namespace ns  (<span class="keyword">cost</span>=<span class="number">0.14</span>.<span class="number">.18</span><span class="number">.81</span> <span class="keyword">rows</span>=<span class="number">244</span> width=<span class="number">68</span>)</span><br></pre></td></tr></table></figure><h4 id="4-1-4-视图的时效性">4.1.4 视图的时效性</h4><p>创建一个表，看能不能在这个视图里面查到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testv1(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int8</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 有数据，说明数据是实时的。</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v_user_tab <span class="keyword">where</span> relname = <span class="string">'testv1'</span>;</span><br></pre></td></tr></table></figure><h4 id="4-1-5-尝试为视图创建索引">4.1.5 尝试为视图创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_v_user_tab_relname <span class="keyword">on</span> v_user_tab <span class="keyword">using</span> btree (relname);</span><br><span class="line"><span class="comment">-- 会报错：&gt; 错误:  "v_user_tab" 不是一个表或物化视图</span></span><br></pre></td></tr></table></figure><h4 id="4-1-6-删除视图">4.1.6 删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> v_user_tab;</span><br></pre></td></tr></table></figure><h3 id="4-2-物化视图">4.2 物化视图</h3><h4 id="4-2-1-创建物化视图">4.2.1 创建物化视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="string">"public"</span>.<span class="string">"mv_user_tab"</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_class <span class="keyword">where</span> relnamespace != <span class="string">'11'</span> <span class="keyword">and</span> relnamespace != <span class="string">'13887'</span>  <span class="keyword">and</span> relkind = <span class="string">'r'</span>;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-使用物化视图">4.2.2 使用物化视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv_user_tab;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv_user_tab <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br></pre></td></tr></table></figure><p><img src="assets/baea60992c074e12b16883a688a38e63.png" alt="在这里插入图片描述"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关联查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_namespace;</span><br><span class="line"><span class="keyword">select</span> ns.nspname,vt.* <span class="keyword">from</span> mv_user_tab vt <span class="keyword">left</span> <span class="keyword">join</span>  pg_namespace ns <span class="keyword">on</span> vt.relnamespace = ns.oid;</span><br><span class="line"><span class="keyword">select</span> ns.nspname,vt.* <span class="keyword">from</span> mv_user_tab vt <span class="keyword">left</span> <span class="keyword">join</span>  pg_namespace ns <span class="keyword">on</span> vt.relnamespace = ns.oid <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br></pre></td></tr></table></figure><p><img src="assets/4ded55ea13214de9b7d15531224c12c3.png" alt="在这里插入图片描述"><br>基础使用，到目前为止好像都没有差异。</p><h4 id="4-2-3-查看物化视图的执行计划">4.2.3 查看物化视图的执行计划</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> mv_user_tab <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br><span class="line"></span><br><span class="line">Seq Scan on mv_user_tab  (cost=0.00..55.53 rows=1 width=260)</span><br><span class="line">  Filter: (relname = 'Sheet4'::name)</span><br></pre></td></tr></table></figure><p>没有走索引，根据上面的查询我们可以知道其实 pg_class.relname 是有索引的，但是这里没有用到。<br>其实不是这样的，这里和视图就有点不一样，当它创建后，我们应该把物化视图当做一个独立的个体（独立的表），它有索引，它只走自己的索引（等下我们尝试为这个字段创建索引）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> ns.nspname,vt.* <span class="keyword">from</span> mv_user_tab vt <span class="keyword">left</span> <span class="keyword">join</span>  pg_namespace ns <span class="keyword">on</span> vt.relnamespace = ns.oid <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Merge</span> <span class="keyword">Right</span> <span class="keyword">Join</span>  (<span class="keyword">cost</span>=<span class="number">55.76</span>.<span class="number">.55</span><span class="number">.86</span> <span class="keyword">rows</span>=<span class="number">1</span> width=<span class="number">324</span>)</span><br><span class="line">  <span class="keyword">Merge</span> Cond: (ns.oid = vt.relnamespace)</span><br><span class="line">  -&gt;  <span class="keyword">Index</span> <span class="keyword">Scan</span> <span class="keyword">using</span> pg_namespace_oid_index <span class="keyword">on</span> pg_namespace ns  (<span class="keyword">cost</span>=<span class="number">0.14</span>.<span class="number">.18</span><span class="number">.81</span> <span class="keyword">rows</span>=<span class="number">244</span> width=<span class="number">68</span>)</span><br><span class="line">  -&gt;  <span class="keyword">Sort</span>  (<span class="keyword">cost</span>=<span class="number">55.54</span>.<span class="number">.55</span><span class="number">.54</span> <span class="keyword">rows</span>=<span class="number">1</span> width=<span class="number">260</span>)</span><br><span class="line">        <span class="keyword">Sort</span> <span class="keyword">Key</span>: vt.relnamespace</span><br><span class="line">        -&gt;  Seq <span class="keyword">Scan</span> <span class="keyword">on</span> mv_user_tab vt  (<span class="keyword">cost</span>=<span class="number">0.00</span>.<span class="number">.55</span><span class="number">.53</span> <span class="keyword">rows</span>=<span class="number">1</span> width=<span class="number">260</span>)</span><br><span class="line">              Filter: (relname = <span class="string">'Sheet4'</span>::<span class="keyword">name</span>)</span><br></pre></td></tr></table></figure><p>这个也没有走索引，使用的是全表扫描。</p><h4 id="4-2-4-视图的时效性">4.2.4 视图的时效性</h4><p>创建一个表，看能不能在这个物化视图里面查到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testv2(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int8</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 没有数据，说明数据不是实时的。</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv_user_tab <span class="keyword">where</span> relname = <span class="string">'testv2'</span>;</span><br></pre></td></tr></table></figure><p>我们刷新一下物化视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh materialized view  mv_user_tab;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 刷新后，我们就可以查到刚才那个表了</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv_user_tab <span class="keyword">where</span> relname = <span class="string">'testv2'</span>;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-尝试为物化视图创建索引">4.2.5 尝试为物化视图创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_mv_user_tab_relname <span class="keyword">on</span> mv_user_tab <span class="keyword">using</span> btree (relname);</span><br></pre></td></tr></table></figure><p>这里我们再执行这个语句，发现是可以走索引的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> mv_user_tab <span class="keyword">where</span> relname = <span class="string">'Sheet4'</span>;</span><br><span class="line"></span><br><span class="line">Index Scan using idx_mv_user_tab_relname on mv_user_tab  (cost=0.28..8.29 rows=1 width=260)</span><br><span class="line">  Index Cond: (relname = 'Sheet4'::name)</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">index</span> idx_mv_user_tab_relname;</span><br></pre></td></tr></table></figure><h4 id="4-2-6-删除物化视图">4.2.6 删除物化视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">materialized</span> <span class="keyword">view</span> mv_user_tab;</span><br></pre></td></tr></table></figure><p>注意删除物化视图会同步删除对应的索引（和删除表会删除表对应的索引是一样的道理），但是刷新物化视图不会。</p><h3 id="4-3-物化视图延伸">4.3.物化视图延伸</h3><h4 id="4-3-1并发刷新物化视图">4.3.1并发刷新物化视图</h4><p>refresh (全量刷新)默认会为视图加上排它锁，会阻塞查询。</p><p>生产上，我们为了安全，我们一般采用“并发的方式”刷新物化视图。并发刷新的意思就是我刷新的时候，你还可以查询对应的数据。（注意：如果逻辑表复制、数据比较多，并发刷新可能需要时间比较长，而且只能同时刷新一个物化视图，但是整理来说不影响。）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 比如这样</span></span><br><span class="line">refresh materialized view concurrently mv_user_tab;</span><br><span class="line">&gt; 错误:  不能同时刷新物化视图 "public.mv_user_tab"</span><br><span class="line">&gt; HINT:  在物化视图的一个或多个列上创建不带WHERE子句的唯一索引.</span><br></pre></td></tr></table></figure><p>（因为还没研究过对应文档）个人理解，并发刷新就是根据唯一索引判断是新增还是更新数据到物化视图里面，因此需要先有唯一索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> idx_mv_user_tab_oid <span class="keyword">on</span> mv_user_tab <span class="keyword">using</span> btree (<span class="keyword">oid</span>);</span><br><span class="line"><span class="comment">-- 再次尝试并发刷新</span></span><br><span class="line">refresh materialized view concurrently mv_user_tab;</span><br></pre></td></tr></table></figure><h4 id="4-3-2尝试修改物化视图的数据">4.3.2尝试修改物化视图的数据</h4><p>尝试删除数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv_user_tab <span class="keyword">where</span> relname = <span class="string">'testv2'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> mv_user_tab <span class="keyword">where</span> relname = <span class="string">'testv2'</span>;</span><br><span class="line"></span><br><span class="line">&gt; 错误:  不能改变物化视图 "mv_user_tab"</span><br></pre></td></tr></table></figure><p>尝试更新物化视图</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span>  mv_user_tab <span class="keyword">set</span> relname = <span class="string">'testv21'</span> <span class="keyword">where</span> relname = <span class="string">'testv2'</span>;</span><br><span class="line"></span><br><span class="line">&gt; 错误:  不能改变物化视图 "mv_user_tab"</span><br></pre></td></tr></table></figure><p>经过尝试：发现除了刷新操作外，物化视图的数据是不能进行修改和删除所在的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们常用说的视图一般是指 view，即普通视图；而物化视图则是materialized  view（materialized 使物质化，使具体化（materialize 的过去式和过去分词））。两者都是视图，但是名称不一样，说明两者还有有所差异的。下面就来简单介绍一下PostgreSQL中的视图和物化视图的差异。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="PostgreSQL" scheme="https://yansheng836.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>fastjson序列化保持字段顺序</title>
    <link href="https://yansheng836.github.io/article/ec768f3c.html"/>
    <id>https://yansheng836.github.io/article/ec768f3c.html</id>
    <published>2021-09-04T12:38:04.000Z</published>
    <updated>2021-09-12T10:19:54.292Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 fastjson 将对象序列化成字符串时，发现字段顺序乱了，百度搜了一下，发现原因是将字符串反序列化（即转成JSON对象）时，被默认规则处理了。如果不想使用默认规则，就需要我们指定需要的规则，这里我们可以使用 <code>Feature.OrderedField</code> 来使其保持原有字段顺序。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(jsonString);</span><br><span class="line"><span class="comment">// 默认</span></span><br><span class="line">JSONObject jsonObject = JSON.parseObject(jsonString);</span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line">JSONObject jsonObject = JSON.parseObject(jsonString, Feature.OrderedField);</span><br><span class="line">String string= JSON.toJSONString(jsonObject);</span><br><span class="line">System.out.println(string);</span><br></pre></td></tr></table></figure><a id="more"></a><p>我直接去看了下 <code>JSON.parseObject</code> 方法，我猜测字段顺序不一致就是被默认的这个规则影响的：<code>Feature.SortFeidFastMatch</code> ，字面意思就是 <strong>以最快速度为字段进行排序</strong>。</p><p><img src="https://img-blog.csdnimg.cn/7bd5b032a5d043088d50c5ef63cc3600.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56em5pe25piO5pyI5LmL5ZCb5Li05aSp5LiL,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(jsonString);</span><br><span class="line"><span class="comment">// 默认</span></span><br><span class="line">JSONObject jsonObject = JSON.parseObject(jsonString);</span><br><span class="line"><span class="comment">// 即上面默认处理 相当于 </span></span><br><span class="line">JSONObject jsonObject = JSON.parseObject(jsonString, Feature.SortFeidFastMatch);</span><br></pre></td></tr></table></figure><p>（本来想深究一下的，没想到 <code>Feature</code> 是个枚举类型对象 ，而 <code>getMask()</code> 方法只会返回一个 int 值，然后走不通了，就先这样吧 😂 ）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 fastjson 将对象序列化成字符串时，发现字段顺序乱了，百度搜了一下，发现原因是将字符串反序列化（即转成JSON对象）时，被默认规则处理了。如果不想使用默认规则，就需要我们指定需要的规则，这里我们可以使用 &lt;code&gt;Feature.OrderedField&lt;/code&gt; 来使其保持原有字段顺序。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(jsonString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 默认&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSONObject jsonObject = JSON.parseObject(jsonString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 修改后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSONObject jsonObject = JSON.parseObject(jsonString, Feature.OrderedField);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String string= JSON.toJSONString(jsonObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(string);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
      <category term="Java工具" scheme="https://yansheng836.github.io/tags/java-tool/"/>
    
  </entry>
  
  <entry>
    <title>记一次CSDN的资源加载失败的问题的解决方法</title>
    <link href="https://yansheng836.github.io/article/461b977e.html"/>
    <id>https://yansheng836.github.io/article/461b977e.html</id>
    <published>2021-09-03T14:53:32.000Z</published>
    <updated>2021-09-12T10:08:34.274Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，某天突然发现CSDN加载不了，我还以为网站出现故障了，但是没想到第二天还是访问不了，问了下同事，他的好像没有什么问题……</p><p>（大概长这样）<br><img src="https://img-blog.csdnimg.cn/3a19a91321f5432aaccbfbdd8629a39f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56em5pe25piO5pyI5LmL5ZCb5Li05aSp5LiL,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><p>找到加载失败的url（大部分是CDN的图片和样式文件），本地ping了下，没想到都超时了，怪不得加载不出来！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;ping csdnimg.cn</span><br><span class="line"></span><br><span class="line">正在 Ping uz95.v.trpcdn.net [183.255.253.40] 具有 32 字节的数据:</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br></pre></td></tr></table></figure><p>然后我就找到站长之家的 <a href="https://ping.chinaz.com/csdnimg.cn" target="_blank" rel="noopener">ping检测工具</a> ，找到速度比较快的ip，放到hosts里面，DNS减少请求的链路。</p><p><img src="https://img-blog.csdnimg.cn/ec7d8471f2f64f81bb9d8078052e0a63.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56em5pe25piO5pyI5LmL5ZCb5Li05aSp5LiL,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>果然就可以了，然后效仿，那个加载失败就给他加上，最后是张这样，终于恢复了！！<br>（至于原因，个人猜测是公司局域网策略变动导致的，因为在这之前我一直都是可以正常访问的。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CSDN 博客相关</span></span><br><span class="line"><span class="comment"># csdn https://ping.chinaz.com/csdnimg.cn</span></span><br><span class="line">121.12.99.122 uz95.v.trpcdn.net</span><br><span class="line">121.12.99.122 csdnimg.cn </span><br><span class="line">123.244.92.6 csdnimg.cn </span><br><span class="line">121.12.99.98 csdnimg.cn </span><br><span class="line">219.145.180.88 csdnimg.cn </span><br><span class="line">116.162.101.30 csdnimg.cn </span><br><span class="line">121.12.99.76 csdnimg.cn  </span><br><span class="line">121.12.99.90 csdnimg.cn  </span><br><span class="line">129.227.7.170 csdnimg.cn  </span><br><span class="line">103.104.168.98 csdnimg.cn  </span><br><span class="line">23.248.177.91 csdnimg.cn  </span><br><span class="line">129.227.156.178 csdnimg.cn  </span><br><span class="line">129.227.156.178 csdnimg.cn </span><br><span class="line"></span><br><span class="line">121.12.99.122 g.csdnimg.cn </span><br><span class="line">123.244.92.6 g.csdnimg.cn </span><br><span class="line">121.12.99.98 g.csdnimg.cn </span><br><span class="line">219.145.180.88 g.csdnimg.cn </span><br><span class="line">116.162.101.30 g.csdnimg.cn </span><br><span class="line">121.12.99.76 g.csdnimg.cn  </span><br><span class="line">121.12.99.90 g.csdnimg.cn  </span><br><span class="line">129.227.7.170 g.csdnimg.cn  </span><br><span class="line">103.104.168.98 g.csdnimg.cn  </span><br><span class="line">23.248.177.91 g.csdnimg.cn  </span><br><span class="line">129.227.156.178 g.csdnimg.cn  </span><br><span class="line">129.227.156.178 g.csdnimg.cn </span><br><span class="line"></span><br><span class="line">121.12.99.122 avatar.csdnimg.cn </span><br><span class="line">123.244.92.6 avatar.csdnimg.cn </span><br><span class="line">121.12.99.98 avatar.csdnimg.cn </span><br><span class="line">219.145.180.88 avatar.csdnimg.cn </span><br><span class="line">116.162.101.30 avatar.csdnimg.cn </span><br><span class="line">121.12.99.76 avatar.csdnimg.cn  </span><br><span class="line">121.12.99.90 avatar.csdnimg.cn  </span><br><span class="line">129.227.7.170 avatar.csdnimg.cn  </span><br><span class="line">103.104.168.98 avatar.csdnimg.cn  </span><br><span class="line">23.248.177.91 avatar.csdnimg.cn  </span><br><span class="line">129.227.156.178 avatar.csdnimg.cn  </span><br><span class="line">129.227.156.178 avatar.csdnimg.cn</span><br><span class="line"></span><br><span class="line">180.127.236.6 img-blog.csdnimg.cn </span><br><span class="line">121.12.99.76 img-blog.csdnimg.cn  </span><br><span class="line">123.244.92.5 img-blog.csdnimg.cn</span><br><span class="line">180.127.43.12 img-blog.csdnimg.cn </span><br><span class="line">121.12.99.90 img-blog.csdnimg.cn </span><br><span class="line">129.227.7.170 img-blog.csdnimg.cn  </span><br><span class="line">121.12.99.122 img-blog.csdnimg.cn</span><br><span class="line">121.12.99.98 img-blog.csdnimg.cn</span><br><span class="line">129.227.156.178 img-blog.csdnimg.cn</span><br><span class="line">129.227.156.179 img-blog.csdnimg.cn</span><br><span class="line">129.227.55.4 img-blog.csdnimg.cn</span><br><span class="line">38.124.43.229 img-blog.csdnimg.cn</span><br><span class="line"></span><br><span class="line">121.12.99.98 img-home.csdnimg.cn</span><br><span class="line">123.244.92.7 img-home.csdnimg.cn </span><br><span class="line">121.12.99.76 img-home.csdnimg.cn  </span><br><span class="line">121.12.99.122 img-home.csdnimg.cn </span><br><span class="line">121.12.99.90 img-home.csdnimg.cn </span><br><span class="line">103.104.168.99 img-home.csdnimg.cn  </span><br><span class="line">38.124.43.227 img-home.csdnimg.cn</span><br><span class="line">129.227.55.4 img-home.csdnimg.cn</span><br><span class="line">129.227.7.170 img-home.csdnimg.cn</span><br><span class="line">129.227.156.178 img-home.csdnimg.cn</span><br><span class="line">129.227.156.179 img-home.csdnimg.cn</span><br><span class="line">129.227.55.4 img-home.csdnimg.cn</span><br><span class="line">38.124.43.229 img-home.csdnimg.cn</span><br><span class="line"></span><br><span class="line">121.12.99.122 imgconvert.csdnimg.cn</span><br><span class="line">121.78.55.82 imgconvert.csdnimg.cn</span><br><span class="line">123.244.92.8 imgconvert.csdnimg.cn</span><br><span class="line">106.225.244.202 imgconvert.csdnimg.cn</span><br><span class="line">123.244.92.5 imgconvert.csdnimg.cn</span><br><span class="line">38.124.43.226 imgconvert.csdnimg.cn</span><br><span class="line">129.227.156.178 imgconvert.csdnimg.cn</span><br><span class="line">129.227.156.179 imgconvert.csdnimg.cn</span><br><span class="line">103.136.249.22 imgconvert.csdnimg.cn</span><br><span class="line">129.227.55.4 imgconvert.csdnimg.cn</span><br><span class="line">38.124.43.229 imgconvert.csdnimg.cn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两个都是独立ip</span></span><br><span class="line">182.92.187.217 blog.csdn.net</span><br><span class="line">39.106.226.142 csdn.net</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，某天突然发现CSDN加载不了，我还以为网站出现故障了，但是没想到第二天还是访问不了，问了下同事，他的好像没有什么问题……&lt;/p&gt;
&lt;p&gt;（大概长这样）&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/3a19a91321f5432aaccbfbdd8629a39f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56em5pe25piO5pyI5LmL5ZCb5Li05aSp5LiL,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
      <category term="CMD" scheme="https://yansheng836.github.io/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>git log 日期格式</title>
    <link href="https://yansheng836.github.io/article/7342a5e.html"/>
    <id>https://yansheng836.github.io/article/7342a5e.html</id>
    <published>2021-08-27T08:05:07.000Z</published>
    <updated>2021-09-12T09:58:44.919Z</updated>
    
    <content type="html"><![CDATA[<p>默认的git log查看日志显示的格式如下：</p><p>Date: Thu Aug 16 17:44:32 2018 +0800</p><p>可能不是很容易识别。git bash中使用命令设置即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//修改当前仓库log date格式</span><br><span class="line">git config log.date iso-strict-local</span><br><span class="line"></span><br><span class="line">//全局设置log date格式</span><br><span class="line">git config --global log.date iso-strict-local</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改之后的日历格式：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Date:   2018-08-23T17:16:39+08:00</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者这样</span></span><br><span class="line">git config --global log.date format:'%Y-%m-%d %H:%M:%S'</span><br><span class="line"><span class="meta">#</span><span class="bash"> Date:   2021-08-27 15:38:56</span></span><br></pre></td></tr></table></figure><p><a href="https://git-scm.com/docs/git-log" target="_blank" rel="noopener">https://git-scm.com/docs/git-log</a><br><a href="https://www.cnblogs.com/linx/p/9599075.html" target="_blank" rel="noopener">https://www.cnblogs.com/linx/p/9599075.html</a><br><a href="https://cloud.tencent.com/developer/ask/77373" target="_blank" rel="noopener">https://cloud.tencent.com/developer/ask/77373</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认的git log查看日志显示的格式如下：&lt;/p&gt;
&lt;p&gt;Date: Thu Aug 16 17:44:32 2018 +0800&lt;/p&gt;
&lt;p&gt;可能不是很容易识别。git bash中使用命令设置即可：&lt;/p&gt;
&lt;figure class=&quot;highlight shell
      
    
    </summary>
    
    
    
      <category term="Git" scheme="https://yansheng836.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>curl使用指南</title>
    <link href="https://yansheng836.github.io/article/fce3cbe9.html"/>
    <id>https://yansheng836.github.io/article/fce3cbe9.html</id>
    <published>2021-08-22T04:28:14.000Z</published>
    <updated>2021-09-12T10:20:11.829Z</updated>
    
    <content type="html"><![CDATA[<p>curl是一个命令行工具，通过指定的URL来上传或下载数据，并将数据展示出来。curl中的<code>c</code>表示client，而URL，就是URL。这里我们介绍一下curl的使用。</p><a id="more"></a><h1>1. 命令行基础</h1><h2 id="1-1-命令行选项">1.1 命令行选项</h2><h3 id="1-短形式">1. 短形式</h3><p>在curl中可以使用短形式的命令行选项，比如通知curl打开verbose模式，可以使用<code>-v</code>选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -v www.baidu.com</span></span><br></pre></td></tr></table></figure><p>这里，<code>-v</code>就是短形式的选项，我们使用一个中划线(-)并紧跟着一个字母来指定一个短形式的选项。</p><p>在这个例子中，<code>-v</code>就像一个开关一样，指定某个变量是<code>false</code>还是<code>true</code>。我们可以在一个中划线后面跟多个单字母的选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -vL www.baidu.com</span></span><br></pre></td></tr></table></figure><p>在curl中，命令行解析器总是解析整个命令行，因此，选项可以放在整个命令行的任何位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl www.baidu.com -vL</span></span><br></pre></td></tr></table></figure><p>这个和上面的命令具有同样的效果。当然，虽然是任何位置，但不能放在<code>curl</code>前面啊：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> -vL curl www.baidu.com    // No <span class="built_in">command</span> <span class="string">'-vL'</span> found</span></span><br></pre></td></tr></table></figure><h3 id="2-长形式">2. 长形式</h3><p>单个字母的选项敲起来和用起来都很方便，但是字母的个数有限而需要控制的东西又太多，这个时候就可以使用选项的长形式。同样，为了使得命令便于阅读，绝大多数短形式都有一个对应的长形式。</p><p>和短形式不同的是，长形式的选项使用两个中划线(–)指定，然后紧跟着具体的选项。还有就是，在使用长形式的时候，<code>—</code>后面只能跟一个选项。对于<code>-v</code>，对应的长形式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --verbose www.baidu.com</span></span><br></pre></td></tr></table></figure><p>同样，长形式的选项也可以出现在命令的任何地方：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl www.baidu.com --verbose</span></span><br></pre></td></tr></table></figure><p>对于<code>-vL</code>来说，对应的长形式可以是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --verbose --location www.baidu.com</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --location www.baidu.com --verbose</span></span><br></pre></td></tr></table></figure><h3 id="3-选项的参数">3. 选项的参数</h3><p>在上面的命令中选项<code>-v</code>（或<code>--verbose</code>）以及<code>-L</code>（或<code>--location</code>）都是<code>bool</code>类型的标志位，来告诉curl打开或关闭某些特征。curl还有一种类型的选项，就是需要传递一些参数。比如，如果想在一个HTTP POST中向服务器传递一个字符串：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d arbitrary http://example.com</span></span><br></pre></td></tr></table></figure><p>同样，也可以使用相应的长形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --data arbitrary http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="4-参数有空格？">4. 参数有空格？</h3><p>在上面的例子中，我们的参数<code>arbitrary</code>是一个连续的字符串，但是当我们需要传递一个有空格的参数怎么办？比如<code>Are you OK?</code>，这时我们需要使用引号把参数括起来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -A <span class="string">"Are you OK?"</span> http://example.com</span></span><br></pre></td></tr></table></figure><p>如果不加引号的话：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -A Are you OK? http://example.com</span></span><br></pre></td></tr></table></figure><p>那么curl只会把<code>Are</code>当做用户的参数，剩下的字符，<code>you</code>和<code>OK?</code>会被curl当做额外的URL处理，因为这里并没有用<code>-</code>指定这是一个选项。</p><p>但是如果参数本身有引号的时候怎么办？这在使用JSON传递参数的时候尤其常见，我们可以使用单引号把参数括起来（不过在Windows中不管用）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d <span class="string">'&#123;"name":"fool"&#125;'</span> http://example.com</span></span><br></pre></td></tr></table></figure><p>当数据很多时，我们可以指定一个文件，来传递给curl：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d @params.json http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="5-say-no">5. Say No</h3><p>对于像<code>-t</code>和<code>-L</code>之类的标志选项，我们可以在长形式的前面加上<code>no-</code>前缀来指定关闭相应的特征，比如关闭<code>verbose</code>模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --no-verbose http://example.com</span></span><br></pre></td></tr></table></figure><h2 id="1-2-url">1.2 URL</h2><p>curl支持在一个命令行中处理多个URL，中间用空格间隔即可。curl会对传进来的URL做简单的验证，而不会去验证URL是否真正有效，因此，这里需要使用者提供有效的URL。</p><p>前面说过，curl首先解析整个命令行，将得到选项应用于所有的URL上。如果想对每一个URL使用不同的选项，那么可以使用<code>--next</code>来指定。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --location http://example.com/1 </span></span><br><span class="line">    --next --data sendthis http://example.com/2 </span><br><span class="line">    --next head http://example.com/3</span><br></pre></td></tr></table></figure><h3 id="1-配置文件">1. 配置文件</h3><p>如果选项过多，导致命令很难输入，或者超过了系统命令最大长度的限制，我们可以使用配置文件（config file）来指定curl的选项。</p><p>通过使用<code>-K</code>或<code>--config</code>选项来告诉curl从指定的文件中读取选项，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -K curl.options http://example.com</span></span><br></pre></td></tr></table></figure><p>在文件<code>curl.options</code>中，列出所有需要的选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ask curl to follow redirects</span></span><br><span class="line">--location</span><br><span class="line"><span class="meta">#</span><span class="bash"> ask curl to <span class="keyword">do</span> a HEAD request</span></span><br><span class="line">--head</span><br></pre></td></tr></table></figure><p>和在命令行中一样，在配置文件中也可以使用长形式或短形式，甚至在配置文件中对于长形式可以省略那两个中划线（–）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ask curl to follow redirects</span></span><br><span class="line">location</span><br><span class="line"><span class="meta">#</span><span class="bash"> ask curl to <span class="keyword">do</span> a HEAD request</span></span><br><span class="line">head</span><br></pre></td></tr></table></figure><p>对于使用参数的选项，同样可以使用配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ask curl to change the User-Agent <span class="keyword">in</span> HTTP header</span></span><br><span class="line">user-agent "something-is-an-agent"</span><br></pre></td></tr></table></figure><p>既然叫做配置文件，那么上面的选项也可以写作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ask curl to change the User-Agent <span class="keyword">in</span> HTTP header</span></span><br><span class="line">user-agent = "something-is-an-agent"</span><br></pre></td></tr></table></figure><p>甚至可以省略没有空格的参数的引号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ask curl to change the User-Agent <span class="keyword">in</span> HTTP header</span></span><br><span class="line">user-agent = something-is-an-agent</span><br></pre></td></tr></table></figure><p>当然，如果参数中有空格的话就不能省略引号了。</p><h1>2. 开始使用curl</h1><p>在前面我们简单地介绍了什么是curl以及一些基础的命令行知识。我们通过命令行的方式将需要处理的URL交给curl去处理。</p><p>在这里，我们开始着手使用curl，了解curl能做什么以及如何去做。</p><h2 id="2-1-verbose模式">2.1 Verbose模式</h2><p>如果curl得到的结果不是期望的结果，我们可以使用<code>-v</code>或<code>--verbose</code>进入Verbose模式获取更多的信息。</p><h3 id="1-查看通信过程">1. 查看通信过程</h3><p>在Verbose模式中，curl会得到更多的对话式信息，帮助我们了解发生了什么。curl会在每一个信息前面加上*进行标识。在下面的例子中，我们将百度的首页保存下来（使用<code>-o</code>选项并指定参数<code>baidu</code>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -v www.baidu.com -o baidu</span></span><br></pre></td></tr></table></figure><p>我们可以得到如下的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.baidu.com port 80 (#0)</span><br><span class="line">*   Trying 14.215.177.39... connected</span><br><span class="line">* Connected to www.baidu.com (14.215.177.39) port 80 (#0)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GET / HTTP/1.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: www.baidu.com</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 2381</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Date: Fri, 14 Sep 2018 09:55:18 GMT</span><br><span class="line">&lt; Etag: "588604dd-94d"</span><br><span class="line">&lt; Last-Modified: Mon, 23 Jan 2017 13:27:57 GMT</span><br><span class="line">&lt; Pragma: no-cache</span><br><span class="line">&lt; Server: bfe/1.0.8.18</span><br><span class="line">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line">&lt;</span><br><span class="line">&#123;</span><br><span class="line">             [data not shown]</span><br><span class="line">103  2381  103  2381    0     0   113k      0 --:--:-- --:--:-- --:--:--  232k* Connection #0 to host www.baidu.com left intact</span><br><span class="line"></span><br><span class="line">* Closing connection #0</span><br></pre></td></tr></table></figure><p>下面的信息是建立一个链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.baidu.com port 80 (#0)</span><br><span class="line">*   Trying 14.215.177.39... connected</span><br><span class="line">* Connected to www.baidu.com (14.215.177.39) port 80 (#0)</span><br></pre></td></tr></table></figure><p>然后就是本次的HTTP请求：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> GET / HTTP/1.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: www.baidu.com</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>接下来是数据的传输过程。然后就是响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 2381</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Date: Fri, 14 Sep 2018 09:55:18 GMT</span><br><span class="line">&lt; Etag: "588604dd-94d"</span><br><span class="line">&lt; Last-Modified: Mon, 23 Jan 2017 13:27:57 GMT</span><br><span class="line">&lt; Pragma: no-cache</span><br><span class="line">&lt; Server: bfe/1.0.8.18</span><br><span class="line">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure><p>连箭头都不一样了。</p><h3 id="2-更详细的信息">2. 更详细的信息</h3><p>如果觉得使用<code>-v</code>的信息还不够的话，还可以使用<code>--trace [filename]</code>选项来讲完整的流保存到<code>filename</code>中。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --trace dump www.baidu.com</span></span><br></pre></td></tr></table></figure><p>之后，就可以发现一个新的文件<code>dump</code>，里面保存着刚才那个会话的所有信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">== Info: About to connect() to www.baidu.com port 80 (#0)</span><br><span class="line">== Info:   Trying 14.215.177.39... == Info: connected</span><br><span class="line">== Info: Connected to www.baidu.com (14.215.177.39) port 80 (#0)</span><br><span class="line">=&gt; Send header, 166 bytes (0xa6)</span><br><span class="line">0000: 47 45 54 20 2f 20 48 54 54 50 2f 31 2e 31 0d 0a GET / HTTP/1.1..</span><br><span class="line">0010: 55 73 65 72 2d 41 67 65 6e 74 3a 20 63 75 72 6c User-Agent: curl</span><br><span class="line">0020: 2f 37 2e 31 39 2e 37 20 28 78 38 36 5f 36 34 2d /7.19.7 (x86_64-</span><br><span class="line">0030: 72 65 64 68 61 74 2d 6c 69 6e 75 78 2d 67 6e 75 redhat-linux-gnu</span><br><span class="line">0040: 29 20 6c 69 62 63 75 72 6c 2f 37 2e 31 39 2e 37 ) libcurl/7.19.7</span><br><span class="line">0050: 20 4e 53 53 2f 33 2e 32 37 2e 31 20 7a 6c 69 62  NSS/3.27.1 zlib</span><br><span class="line">0060: 2f 31 2e 32 2e 33 20 6c 69 62 69 64 6e 2f 31 2e /1.2.3 libidn/1.</span><br><span class="line">0070: 31 38 20 6c 69 62 73 73 68 32 2f 31 2e 34 2e 32 18 libssh2/1.4.2</span><br><span class="line">0080: 0d 0a 48 6f 73 74 3a 20 77 77 77 2e 62 61 69 64 ..Host: www.baid</span><br><span class="line">0090: 75 2e 63 6f 6d 0d 0a 41 63 63 65 70 74 3a 20 2a u.com..Accept: *</span><br><span class="line">00a0: 2f 2a 0d 0a 0d 0a                               /*....</span><br><span class="line">&lt;= Recv header, 17 bytes (0x11)</span><br><span class="line">0000: 48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d HTTP/1.1 200 OK.</span><br><span class="line">0010: 0a                                              .</span><br><span class="line">&lt;= Recv header, 22 bytes (0x16)</span><br><span class="line">0000: 41 63 63 65 70 74 2d 52 61 6e 67 65 73 3a 20 62 Accept-Ranges: b</span><br><span class="line">0010: 79 74 65 73 0d 0a                               ytes..</span><br></pre></td></tr></table></figure><p>文件的前21行如上所示。每一个发送和接收的数据以十六进制的形式保存起来了，方便以后的分析。</p><p>如果觉得十六进制没啥帮助的话，可以使用<code>--trace-ascii [filename]</code>选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --trace-ascii dump www.baidu.com</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">== Info: About to connect() to www.baidu.com port 80 (#0)</span><br><span class="line">== Info:   Trying 14.215.177.38... == Info: connected</span><br><span class="line">== Info: Connected to www.baidu.com (14.215.177.38) port 80 (#0)</span><br><span class="line">=&gt; Send header, 166 bytes (0xa6)</span><br><span class="line">0000: GET / HTTP/1.1</span><br><span class="line">0010: User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7</span><br><span class="line">0050:  NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">0082: Host: www.baidu.com</span><br><span class="line">0097: Accept: */*</span><br><span class="line">00a4:</span><br><span class="line">&lt;= Recv header, 17 bytes (0x11)</span><br><span class="line">0000: HTTP/1.1 200 OK</span><br><span class="line">&lt;= Recv header, 22 bytes (0x16)</span><br><span class="line">0000: Accept-Ranges: bytes</span><br><span class="line">&lt;= Recv header, 76 bytes (0x4c)</span><br><span class="line">0000: Cache-Control: private, no-cache, no-store, proxy-revalidate, no</span><br><span class="line">0040: -transform</span><br><span class="line">&lt;= Recv header, 24 bytes (0x18)</span><br><span class="line">0000: Connection: Keep-Alive</span><br><span class="line">&lt;= Recv header, 22 bytes (0x16)</span><br><span class="line">0000: Content-Length: 2381</span><br></pre></td></tr></table></figure><p>上面就是前21行的输出。</p><h3 id="3-silence">3. Silence</h3><p>verbose模式的对立模式，就是silence，可以使用<code>-s</code>或<code>--silence</code>选项来告诉curl不输出任何程序的信息或者错误信息，但也会输出响应的结果。</p><p>如果需要在有错误的时候输出错误信息，可以使用<code>-S</code>或<code>--show-error</code>来指定。</p><h2 id="2-2-浏览器到curl">2.2 浏览器到curl</h2><p>别人使用浏览器发起了一个请求之后，如果自己想用curl再来一次同样的请求，这里日常的工作中是比较常见的一个操作。在curl中，有没有什么比较简便快捷的方式来获得curl命令呢？</p><p>Chrome浏览器和Firefox浏览器都实现了复制成curl的工具，可以将浏览器的请求快速复制成curl命令，非常方便快捷。</p><h3 id="1-chrome">1. Chrome</h3><p>在Chrome中，打开More tools-&gt;Developer模式，选择Network选项卡，然后就可以看到所有的请求，选中相应的请求，右键就有<code>Copy as cURL</code>选项，单击就可以了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2901315f550326146db9c5d3402a5bb7.png" alt="img"></p><h3 id="2-firefox">2. Firefox</h3><p>在Firefox中，打开Web Developer-&gt;Network工具，然后右键想要复制的链接，就有一个<code>Copy as cURL</code>的选项，单击就可以了。</p><h1>3. HTTP与curl</h1><p>与curl一起使用的协议，最多的还是HTTP，这里就将介绍如何有效地使用curl来发送HTTP请求。</p><h2 id="3-1-http方法">3.1 HTTP方法</h2><p>在每一个HTTP请求中，都有一个对应的方法，常用的方法有：<code>GET</code>、<code>POST</code>、<code>HEAD</code>和<code>PUT</code>。</p><p>如果在一个curl命令中不指定具体的方法，那么默认的就是使用<code>GET</code>方法。对于其它的方法，可以在curl命令中指定：</p><table><thead><tr><th>method</th><th>option</th></tr></thead><tbody><tr><td>`POST`</td><td>`-d`或`-F`</td></tr><tr><td>`HEAD`</td><td>`-I`</td></tr><tr><td>`PUT`</td><td>`-T`</td></tr></tbody></table>## 3.2 Header<p>在curl中，使用<code>-i</code>选项可以显示Response的Header信息，连同Body数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -i www.baidu.com</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 2381</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Mon, 17 Sep 2018 10:26:42 GMT</span><br><span class="line">Etag: "588604dd-94d"</span><br><span class="line">Last-Modified: Mon, 23 Jan 2017 13:27:57 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta</span><br><span class="line">http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=styleshee</span><br><span class="line">t type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就</span><br><span class="line">知道&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; ... &lt;/body&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>使用<code>-I</code>选项可以只显示Response的Header信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -I www.baidu.com</span></span><br></pre></td></tr></table></figure><h2 id="3-3-post">3.3 POST</h2><p><code>POST</code>是HTTP中向服务端提交数据的一种方法。在浏览器中，但在表单中填写完数据后，浏览器就会默认将填写的数据使用<code>key=value</code>串的形式进行转化。在curl中，我们可以使用<code>-d</code>或<code>--data</code>选项来指定具体的数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d key1=value1&amp;key2=value2 http://example.com</span></span><br></pre></td></tr></table></figure><p>我们也可以使用多个<code>-d</code>选项来指定多组数据，curl会自动把这些数据连接起来，因此上面的例子还可以这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d key1=value1 -d key2=value2 http://example.com</span></span><br></pre></td></tr></table></figure><p>当然，如果数据过多，我们还可以把数据放在一个文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d @filename http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="1-content-type">1. Content-Type</h3><p>当使用<code>POST</code>方法提交数据时，对于提交的数据主要有如下四种形式：</p><ul><li><code>application/x-www-form-urlencoded</code>：默认的形式，即<code>key1=value1&amp;key2=value2</code>的形式；</li><li><code>multipart/form-data</code>：使用表单上传文件时使用这个形式；</li><li><code>application/json</code>：提交JSON格式的数据；</li><li><code>text/xml</code>：提交XML格式的数据。</li></ul><p>Content-Type是一个Header，如果不指定的话，那么默认就是使用<code>application/x-www-form-urlencoded</code>形式传输数据，当需要使用别的形式进行数据传输的话，那么就需要指定这个Header：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d <span class="string">'&#123;I Am A JSON FORM&#125;'</span> -H <span class="string">'Content-Type: application/json'</span> http://example.com</span></span><br></pre></td></tr></table></figure><p>其中，<code>-H</code>就是用来指定一个具体的Header的选项，值就是<code>key=value</code> 的形式。当需要指定其它的Header，可以使用<code>-H</code>选项。</p><h3 id="2-post一个二进制数据">2. POST一个二进制数据</h3><p>在curl中，我们也可以提交一个文件，可以使用<code>--data-binary</code>选项来指定一个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --data-binary @filename http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="3-转化成一个get">3. 转化成一个GET</h3><p>使用<code>-G</code>或<code>-get</code>选项，可以把一个POST请求转化成一个GET请求。如果有<code>-d</code>选项指定的参数，那么curl就会把<code>-d</code>后面的数据添加到URL的后面，用<code>?</code>连接。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -d <span class="string">"key1=value1"</span> -G http://example.com</span></span><br></pre></td></tr></table></figure><p>得到的请求URL就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/?key1=value1</span><br></pre></td></tr></table></figure><h3 id="4-url编码">4. URL编码</h3><p>如果使用的数据没有编码，那么可以指定curl来帮助自己进行编码。这时可以使用<code>--data-urlencode</code>选项来指定。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --data-urlencode <span class="string">"name=Alan Walker"</span> http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="5-multipart-formposts">5. multipart formposts</h3><p>如果一个HTTP POST具有如下形式的表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"submit.cgi"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    File: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"secret"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户可以在<code>Name</code>中填写名字，在<code>File</code>中选择一个文件，然后单击<code>Submit</code>按钮提交数据。</p><p>为了可以在curl中模拟这个请求，我们可以使用<code>-F</code>或<code>--form</code>选项来指定数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -F person=annonymous -F secret=@filename http://example.com/submit.cgi</span></span><br></pre></td></tr></table></figure><p>在上面的表单中，<code>action</code>指定了这个请求发送到哪里；<code>method</code>指定这是一个<code>POST</code>请求；而<code>enctype</code>指定了这是一个multipart formpost。</p><p>当执行上面的curl命令后，curl会产生如下的请求头：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /submit.cgi HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">User-Agent: curl/7.46.0</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Length: 313</span><br><span class="line">Content-Type: multipart/form-data; boundary=------------------------d74496d66958873e</span><br></pre></td></tr></table></figure><p>其中<code>Content-Type</code>是和<code>enctype</code>一致的。</p><p>当使用<code>-F</code>选项时，默认的<code>Content-Type</code>就是<code>multipart/form-data</code>，不过，我们也可以使用<code>-H</code>进行指定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -F <span class="string">'name=Dan'</span> -H <span class="string">'Content-Type: multipart/magic'</span> https://example.com</span></span><br></pre></td></tr></table></figure><h3 id="6-d-vs-f">6. <code>-d</code> vs <code>-F</code></h3><p>在前面我们介绍了使用<code>-d</code>构造一个基本的POST请求，和<code>-F</code>构造一个multipart formpost请求。那么这两个选项有啥区别以及什么时候使用呢？</p><p>这两个选项都是把指定的数据发送到服务器上，区别在于数据传递的格式。大多数时候，接收端来指定希望客户端发送数据的格式，客户端不能随意自己指定格式。</p><ul><li><strong>HTML表单</strong></li></ul><p>当使用HTML表单时，会使用<code>&lt;form&gt;</code>标签指定一个表单，这会让浏览器使用<code>POST</code>方法。如果标签中含有<code>enctype=multipart/form-data</code>，这意味着使用multipart formpost方式，在curl中就是使用<code>-F</code>选项。一个典型的场景就是表单中含有<code>&lt;input type=file&gt;</code>标签。</p><ul><li><strong>不用HTML表单</strong></li></ul><p><code>POST</code>方法不一定非要在HTML中，在好多的service、APIs中，也可以使用<code>POST</code>请求。</p><p>如果这些service期望使用JSON或者其它类似的格式的数据，那么这就是一个普通的POST请求。在curl中就可以使用<code>-d</code>选项。不过要注意<code>-d</code>的默认Content-Type是不是期望的格式，如果不是的话，可以使用<code>-H</code>进行更改。</p><h2 id="3-4-http重定向-redirect">3.4 HTTP重定向（redirect）</h2><p>重定向是HTTP协议中的一个基础部分。在重定向中，服务器给客户端的并不是客户端想要的内容，而是一个车具体的指令，告诉客户端如果想获取想要的数据，应该到哪里去请求。</p><p>但不是所有的重定向都一样。重定向之后的请求使用什么方法呢？重定向多久呢？</p><p>所有的重定向都会返回<code>Location:</code>的Header，来指定一个新的URL。</p><h3 id="1-curl：redirect">1. curl：redirect</h3><p>在curl中，默认不会重定向，可以使用<code>-L</code>或<code>--location</code>选项来告诉curl重定向：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="2-get还是post">2. <code>GET</code>还是<code>POST</code></h3><p>第一次请求后，服务器会告诉客户端下一次请求需要使用的方法。关于重定向的响应码如下：</p><table><thead><tr><th>Method</th><th>Permanent</th><th>Temporary</th></tr></thead><tbody><tr><td>切换到`GET`</td><td>301</td><td>302和303</td></tr><tr><td>使用第一次请求的方法</td><td>308</td><td>307</td></tr></tbody></table>我们可以指定curl在重定向时使用什么方法。如果我们第一次请求使用的不是`GET`方法，重定向后也不希望curl默认使用`GET`方法，那么我们可以使用`--post301`,`--post302`和`--post303`选项来指定。<h2 id="3-5-修改http请求">3.5 修改HTTP请求</h2><p>每一个请求都有一个请求行、一些请求头和可选的请求体，这里我们看看在curl中可以具体修改的部分，包括请求行和请求头。</p><h3 id="1-请求方法">1. 请求方法</h3><p>在请求行中包含这次请求所使用的方法。我们使用下面的简单命令就可以进行一个<code>GET</code>方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl http://example.com/file</span></span><br></pre></td></tr></table></figure><p>这会生成如下的请求行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /file HTTP/1.1</span><br></pre></td></tr></table></figure><p>在<strong><em>HTTP方法</em></strong>中我们可以通过具体的选项指定使用什么方法。这里我们也可以使用<code>-X</code>选项来进行指定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="2-修改请求头">2. 修改请求头</h3><p>在curl中，我们可以使用<code>-H</code>或<code>--header</code>选项来指定Header。之前我们就使用<code>-H</code>指定了<code>Content-Type</code>，其实Header就是一个<code>key: value</code>对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -H <span class="string">"HeaderName: HeaderValue"</span> http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="3-referer">3. Referer</h3><p>我们还可以在curl通过<code>--referer</code>选项来指定我们是从哪里跳转过来的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --referer http://fromexample.com http://toexample.com</span></span><br></pre></td></tr></table></figure><h3 id="4-user-agent">4. User Agent</h3><p>这个字段是用来表示客户端的设备信息的，服务器会根据这个字段，针对不同的设备，返回不同格式的网页。在curl中，可以使用<code>--user-agent</code>选的来指定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --user-agent <span class="string">"[User Agent]"</span> http://example.com</span></span><br></pre></td></tr></table></figure><h2 id="3-6-cookies">3.6 Cookies</h2><p>HTTP是一种无状态的协议，为了在会话中保存一些状态，可以使用Cookies。服务器通过<code>Set-Cookie:</code>来设置Cookie，客户端就可以在下一次请求中携带这些数据。</p><h3 id="1-设置cookie">1. 设置Cookie</h3><p>我们可以使用<code>--cookie</code>选项来设置一个Cookie：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --cookie <span class="string">"CookieName=CookieValue"</span> http://example.com</span></span><br></pre></td></tr></table></figure><h3 id="2-从文件中读取cookies">2. 从文件中读取Cookies</h3><p>curl默认不会记住服务器设置的Cookie，也不会在下一次请求中携带Cookie。除非用户通过选项自己设置。</p><p>我们可以把之前的Cookies保存到一个文件，然后在下一次请求中指定curl读取文件中的Cookies：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -b cookies.txt http://example.com</span></span><br></pre></td></tr></table></figure><p><code>-b</code>选项指定curl去给定的文件中读取Cookies。</p><p>不过要主要，这里仅仅是读取Cookies，如果这次请求中服务器修改了Cookie，那么curl是不会进行保存的，除非我们手动指定。</p><h3 id="3-写cookies到文件">3. 写Cookies到文件</h3><p>我们可以使用<code>-c</code>选项指定curl保存这次请求中服务器设置的Cookies：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -c cookie.jar.txt http://example.com</span></span><br></pre></td></tr></table></figure><p>有时，我们既需要从文件中读取Cookies，也需要保存服务器设置的Cookies。那么就可以同时使用<code>-b</code>和<code>-c</code>选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -b cookies.txt -c cookie.jar.txt http://example.com</span></span><br></pre></td></tr></table></figure><hr><p>作者：今天中午吃啥<br>链接：<a href="https://www.jianshu.com/p/fc0eb6c60816" target="_blank" rel="noopener">https://www.jianshu.com/p/fc0eb6c60816</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;curl是一个命令行工具，通过指定的URL来上传或下载数据，并将数据展示出来。curl中的&lt;code&gt;c&lt;/code&gt;表示client，而URL，就是URL。这里我们介绍一下curl的使用。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://yansheng836.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>推荐几个无版权图片库，可免费使用</title>
    <link href="https://yansheng836.github.io/article/e6b97faf.html"/>
    <id>https://yansheng836.github.io/article/e6b97faf.html</id>
    <published>2021-08-21T12:54:52.000Z</published>
    <updated>2021-09-12T10:07:18.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pixabay">PixaBay</h2><p>「Pixabay」是全球知名的图库网站及充满活力的创意社区 , 拥有上百万张免费正版高清图片素材 , 涵盖照片、插画、矢量图、视频等分类。即使是出于商业目的，也可以免费使用该网站的图片素材。</p><p>Pixabay 支持<strong>设置中文</strong>语言，在最下方的「Language」选项找到简体中文，同时也支持中文关键词搜索，这点还是对国人比较有好的。在搜索结果最上方的区域并不免费的图片，属于 Shutterstock 图库的广告位，注意甄别。</p><p>网址： <a href="https://pixabay.com/zh/" target="_blank" rel="noopener">https://pixabay.com/zh/</a></p><p><img src="https://img-blog.csdnimg.cn/50b8ba75cde84731b70e189e3ab540ec.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/cba82d14464d4c35951a16d1571b19f1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="pexels">Pexels</h2><p>Pexels 提供高质量且完全免费的素材照片，这些照片均在 Pexels 许可下授权。网站精心地为所有照片贴上了标签，你可以搜索，也可以轻松通过发现页面发现这些照片。网站包含有成千上万的免费素材照片，每天都会添加新的高分辨率照片。</p><p>网址： <a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com</a></p><p><img src="https://img-blog.csdnimg.cn/631a6639e81c4a299a3176753bfc905e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2c4f759db305411ab558ca152321e89c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="unsplash">UnSplash</h2><p>「Unsplash」是一个非常著名的无版权图片网站，网站提供了大量的可商用且无版权图片，重要的是质量非常高，每天都在更新，图片以风景为主，滤镜效果的风景图比较多，很适合用来做背景或壁纸。Unsplash <strong>只支持英文搜索</strong>，可以用翻译器转换一下。无需注册，就可以免费下载图片。</p><p>网址： <a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com</a></p><p><img src="https://img-blog.csdnimg.cn/76ea7e0d9e5149c7b2bc29009c7abddd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0b9b51128f74604bfc38053367bd3b2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="wallhaven">Wallhaven</h2><p>Awesome Wallpapers。<br>壁纸天堂，网络上最强的壁纸？！<br>可自由裁剪壁纸尺寸（Crop &amp; Scale Download）</p><p>网址： <a href="https://wallhaven.cc/" target="_blank" rel="noopener">https://wallhaven.cc/</a></p><p><img src="https://img-blog.csdnimg.cn/8642a3029d1342129308d43de2c6a91c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/ff030bcec5254ae38ef3e7f1f93b5f3f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pixabay&quot;&gt;PixaBay&lt;/h2&gt;
&lt;p&gt;「Pixabay」是全球知名的图库网站及充满活力的创意社区 , 拥有上百万张免费正版高清图片素材 , 涵盖照片、插画、矢量图、视频等分类。即使是出于商业目的，也可以免费使用该网站的图片素材。&lt;/p&gt;
&lt;p&gt;Pixabay 支持&lt;strong&gt;设置中文&lt;/strong&gt;语言，在最下方的「Language」选项找到简体中文，同时也支持中文关键词搜索，这点还是对国人比较有好的。在搜索结果最上方的区域并不免费的图片，属于 Shutterstock 图库的广告位，注意甄别。&lt;/p&gt;
&lt;p&gt;网址： &lt;a href=&quot;https://pixabay.com/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pixabay.com/zh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/50b8ba75cde84731b70e189e3ab540ec.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
  </entry>
  
  <entry>
    <title>Postgres开启慢查询日志</title>
    <link href="https://yansheng836.github.io/article/44ebf4a.html"/>
    <id>https://yansheng836.github.io/article/44ebf4a.html</id>
    <published>2021-08-15T12:50:32.000Z</published>
    <updated>2021-09-12T10:12:55.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-全局设置">1.全局设置</h2><p>修改配置配置文件 <code>postgres.conf</code> ，一般位置pgsql的data目录下，单位是毫秒，如下设置的是10,000毫秒，相当于10秒钟，即：当运行时间超过10秒钟后会以日志的格式记录下来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_min_duration_statement=10000</span><br></pre></td></tr></table></figure><p>然后加载配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># select pg_reload_conf();</span></span><br></pre></td></tr></table></figure><p>查看配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># show log_min_duration_statement;</span></span><br><span class="line"></span><br><span class="line"> log_min_duration_statement </span><br><span class="line"><span class="comment">----------------------------</span></span><br><span class="line"> 10s</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-个性化设置">2.个性化设置</h2><p>即：也可以针对某个用户或者某数据库进行设置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># alter database test set log_min_duration_statement=5000;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-全局设置&quot;&gt;1.全局设置&lt;/h2&gt;
&lt;p&gt;修改配置配置文件 &lt;code&gt;postgres.conf&lt;/code&gt; ，一般位置pgsql的data目录下，单位是毫秒，如下设置的是10,000毫秒，相当于10秒钟，即：当运行时间超过10秒钟后会以日志的格式记录下来：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;log_min_duration_statement=10000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后加载配置：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;postgres=&lt;span class=&quot;comment&quot;&gt;# select pg_reload_conf();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看配置：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;postgres=&lt;span class=&quot;comment&quot;&gt;# show log_min_duration_statement;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; log_min_duration_statement &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;----------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 10s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1 row)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="PostgreSQL" scheme="https://yansheng836.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Python函数默认参数设置</title>
    <link href="https://yansheng836.github.io/article/a08e791c.html"/>
    <id>https://yansheng836.github.io/article/a08e791c.html</id>
    <published>2021-08-08T13:37:51.000Z</published>
    <updated>2021-09-12T10:11:36.785Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，在调用函数时如果不指定某个参数，<a href="http://c.biancheng.net/python/" target="_blank" rel="noopener">Python</a> 解释器会抛出异常。为了解决这个问题，Python 允许为参数设置默认值，即在定义函数时，直接给形式参数指定一个默认值。这样的话，即便调用函数时没有给拥有默认值的形参传递参数，该参数可以直接使用定义函数时设置的默认值。</p><a id="more"></a><p>Python 定义带有默认值参数的函数，其语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(...，形参名，形参名=默认值)</span>：</span></span><br><span class="line"><span class="function">  代码块</span></span><br></pre></td></tr></table></figure><p>注意，在使用此格式定义函数时，指定有默认值的形式参数必须在所有没默认值参数的最后，否则会产生语法错误。</p><p>下面程序演示了如何定义和调用有默认参数的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#str1没有默认参数，str2有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis_str</span><span class="params">(str1,str2 = <span class="string">"http://c.biancheng.net/python/"</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"str1:"</span>,str1)</span><br><span class="line">    print(<span class="string">"str2:"</span>,str2)</span><br><span class="line">dis_str(<span class="string">"http://c.biancheng.net/shell/"</span>)</span><br><span class="line">dis_str(<span class="string">"http://c.biancheng.net/java/"</span>,<span class="string">"http://c.biancheng.net/golang/"</span>)</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1: http://c.biancheng.net/shell/</span><br><span class="line">str2: http://c.biancheng.net/python/</span><br><span class="line">str1: http://c.biancheng.net/java/</span><br><span class="line">str2: http://c.biancheng.net/golang/</span><br></pre></td></tr></table></figure><p>上面程序中，dis_str() 函数有 2 个参数，其中第 2 个设有默认参数。这意味着，在调用 dis_str() 函数时，我们可以仅传入 1 个参数，此时该参数会传给 str1 参数，而 str2 会使用默认的参数，如程序中第 6 行代码所示。</p><p>当然在调用 dis_str() 函数时，也可以给所有的参数传值（如第 7 行代码所示），这时即便 str2 有默认值，它也会优先使用传递给它的新值。</p><p>同时，结合关键字参数，以下 3 种调用 dis_str() 函数的方式也是可以的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dis_str(str1 = <span class="string">"http://c.biancheng.net/shell/"</span>)</span><br><span class="line">dis_str(<span class="string">"http://c.biancheng.net/java/"</span>,str2 = <span class="string">"http://c.biancheng.net/golang/"</span>)</span><br><span class="line">dis_str(str1 = <span class="string">"http://c.biancheng.net/java/"</span>,str2 = <span class="string">"http://c.biancheng.net/golang/"</span>)</span><br></pre></td></tr></table></figure><p>再次强调，当定义一个有默认值参数的函数时，有默认值的参数必须位于所有没默认值参数的后面。因此，下面例子中定义的函数是不正确的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法错误</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis_str</span><span class="params">(str1=<span class="string">"http://c.biancheng.net/python/"</span>,str2,str3)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>显然，str1 设有默认值，而 str2 和 str3 没有默认值，因此 str1 必须位于 str2 和 str3 之后。</p><p>有读者可能会问，对于自己自定义的函数，可以轻易知道哪个参数有默认值，但如果使用 Python 提供的内置函数，又或者其它第三方提供的函数，怎么知道哪些参数有默认值呢？</p><p>Pyhton 中，可以使用“函数名.<strong>defaults</strong>”查看函数的默认值参数的当前值，其返回值是一个元组。以本节中的 dis_str() 函数为例，在其基础上，执行如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dis_str.__defaults__)</span><br></pre></td></tr></table></figure><p>程序执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'http://c.biancheng.net/python/'</span>,)</span><br></pre></td></tr></table></figure><hr><p>转自:<a href="http://c.biancheng.net/view/2256.html" target="_blank" rel="noopener">http://c.biancheng.net/view/2256.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，在调用函数时如果不指定某个参数，&lt;a href=&quot;http://c.biancheng.net/python/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python&lt;/a&gt; 解释器会抛出异常。为了解决这个问题，Python 允许为参数设置默认值，即在定义函数时，直接给形式参数指定一个默认值。这样的话，即便调用函数时没有给拥有默认值的形参传递参数，该参数可以直接使用定义函数时设置的默认值。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python基础" scheme="https://yansheng836.github.io/tags/python-basic/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm中目录directory与包package的区别</title>
    <link href="https://yansheng836.github.io/article/d065b111.html"/>
    <id>https://yansheng836.github.io/article/d065b111.html</id>
    <published>2021-08-07T15:27:16.000Z</published>
    <updated>2021-09-12T10:12:11.846Z</updated>
    
    <content type="html"><![CDATA[<p>对于<a href="http://lib.csdn.net/base/python" target="_blank" rel="noopener">Python</a>而言，有一点是要认识明确的，<a href="http://lib.csdn.net/base/python" target="_blank" rel="noopener">python</a>作为一个相对而言轻量级的，易用的脚本语言（当然其功能并不仅限于此，在此只是讨论该特点），随着程序的增长，可能想要把它分成几个文件，以便逻辑更加清晰，更好维护，亦或想要在几个程序中均使用某个函数，而不必将其复制粘贴到所有程序中。</p><p>为了支持这一点，Python有一种方法将定义函数放在一个文件中，并在脚本中使用它们，这样的文件叫做模块，一个模块中的定义可以被导入到其他模块，或者主模块中。</p><p>简单来说在python中模块就是指一个py文件，如果我们将所有相关的代码都放在一个py文件中，则该py文件既是程序由是模块，但是程序和模块的设计目的是不同的，程序的目的是为了运行，而模块的目的是为了其他程序进行引用。</p><a id="more"></a><p><strong>Dictionary</strong></p><p>Dictionary在pycharm中就是一个文件夹，放置资源文件，对应于在进行JavaWeb开发时用于放置css/<a href="http://lib.csdn.net/base/javascript" target="_blank" rel="noopener">js</a>文件的目录，或者说在进行物体识别时，用来存储背景图像的文件夹。该文件夹其中并不包含_ _ init.py_ _文件</p><p><strong>Python package</strong></p><p>对于Python package 文件夹而言，与Dictionary不同之处在于其会自动创建_ _ init__.py文件。 简单的说，python package就是一个目录，其中包括一组模块和一个_ _ init__.py文件。</p><p>只要image目录是我们程序目录的子目录，我们就可以导入image目录下的任意模块来为我们所用，使用时可如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Image.bmp</span><br><span class="line">tool = Image.bmp.read(<span class="string">'a.bmp'</span>)</span><br></pre></td></tr></table></figure><p><strong>_ _ init_ _.py</strong></p><p>该文件与Python的import机制有关，这关乎到你的哪些.py文件是对外可访问的。有些时候，如果一个包下有很多模块，在调用方import如此多模块是很费事，且不优雅的，此时可以通过修改_ _ init_ <em>.py来完成该任务。<br>在</em> _ init_ <em>.py中定义特殊变量_</em> all_ <em>,将要包含的模块复制给该变量，例如在Image/</em> _ init_ <em>.py中定义</em> <em>all</em> _=[‘tiff’,’bmp’,’jpg’],这里的all 对应的就是 from …import * 中*代指的模块，此时在引用方使用如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">遇到问题没人解答？小编创建了一个Python学习交流QQ群：857662006 </span></span><br><span class="line"><span class="string">寻找有志同道合的小伙伴，互帮互助,群里还有不错的视频学习教程和PDF电子书！</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> image <span class="keyword">import</span> *</span><br><span class="line">tool = tiff.read(<span class="string">'a.tiff'</span>)</span><br></pre></td></tr></table></figure><h3 id="补充：">补充：</h3><p>python模块是：<br>自我包含并且有组织的代码片段为模块。<br>表现形式为：写的代码保存为文件。这个文件就是一个模块。<a href="http://sample.py/" target="_blank" rel="noopener">sample.py</a> 其中文件名smaple为模块名字。</p><p>python包是：<br>包是一个有层次的文件目录结构，它定义了由n个模块或n个子包组成的python应用程序执行环境。</p><p>通俗一点：包是一个包含__init__.py 文件的目录，该目录下一定得有这个__init__.py文件和其它模块或子包。</p><p>python库是参考其它编程语言的说法，就是指python中的完成一定功能的代码集合，供用户使用的代码组合。在python中是包和模块的形式。</p><hr><p>参考：<a href="https://blog.csdn.net/qdPython/article/details/98629976" target="_blank" rel="noopener">https://blog.csdn.net/qdPython/article/details/98629976</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于&lt;a href=&quot;http://lib.csdn.net/base/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python&lt;/a&gt;而言，有一点是要认识明确的，&lt;a href=&quot;http://lib.csdn.net/base/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python&lt;/a&gt;作为一个相对而言轻量级的，易用的脚本语言（当然其功能并不仅限于此，在此只是讨论该特点），随着程序的增长，可能想要把它分成几个文件，以便逻辑更加清晰，更好维护，亦或想要在几个程序中均使用某个函数，而不必将其复制粘贴到所有程序中。&lt;/p&gt;
&lt;p&gt;为了支持这一点，Python有一种方法将定义函数放在一个文件中，并在脚本中使用它们，这样的文件叫做模块，一个模块中的定义可以被导入到其他模块，或者主模块中。&lt;/p&gt;
&lt;p&gt;简单来说在python中模块就是指一个py文件，如果我们将所有相关的代码都放在一个py文件中，则该py文件既是程序由是模块，但是程序和模块的设计目的是不同的，程序的目的是为了运行，而模块的目的是为了其他程序进行引用。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
  </entry>
  
  <entry>
    <title>Python读写CSV文件</title>
    <link href="https://yansheng836.github.io/article/f4ec56db.html"/>
    <id>https://yansheng836.github.io/article/f4ec56db.html</id>
    <published>2021-08-07T05:13:14.000Z</published>
    <updated>2021-09-12T10:29:34.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="csv文件格式">CSV文件格式</h2><p>CSV （逗号分隔值文件格式）</p><blockquote><p>逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。</p><p>转自：<a href="https://baike.baidu.com/item/CSV/10739?fr=aladdin" target="_blank" rel="noopener">CSV(逗号分隔值文件格式) - 百度百科</a></p></blockquote><p>纯文本打开：中间有逗号分隔<br>以Excel方式打开：类似于表格，没有逗号分隔（逗号作为分隔符，但是不显示）</p><a id="more"></a><h2 id="python读写csv文件">Python读写CSV文件</h2><p>简单案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">"测试1"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试2"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试3"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试4"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试5"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">filename = <span class="string">'test.csv'</span></span><br><span class="line">f = open(filename, <span class="string">'w'</span>, encoding=<span class="string">'UTF8'</span>)</span><br><span class="line">writer = csv.writer(f)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    writer.writerow(i)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">f = csv.reader(open(filename, <span class="string">'r'</span>, encoding=<span class="string">'UTF8'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'测试1'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[]</span><br><span class="line">[<span class="string">'测试2'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[]</span><br><span class="line">[<span class="string">'测试3'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[]</span><br><span class="line">[<span class="string">'测试4'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[]</span><br><span class="line">[<span class="string">'测试5'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>左边是WPS打开的，右边时notepad++打开的，发现莫名其妙多了一个空行。<br><img src="https://img-blog.csdnimg.cn/a28cf37189a747138e998e91edbf1cd1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们直接在IDE中打开open方法（Ctrl+鼠标左键点击open即可打开该方法定义），看下该方法的定义（这里只看newline参数，省略了其他参数的介绍）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(file, mode=<span class="string">'r'</span>, buffering=None, encoding=None, errors=None, newline=None, closefd=True)</span>:</span> <span class="comment"># known special case of open</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Open file and return a stream.  Raise OSError upon failure.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    ……</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    newline controls how universal newlines works (it only applies to text</span></span><br><span class="line"><span class="string">    mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as</span></span><br><span class="line"><span class="string">    follows:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    * On input, if newline is None, universal newlines mode is</span></span><br><span class="line"><span class="string">      enabled. Lines in the input can end in '\n', '\r', or '\r\n', and</span></span><br><span class="line"><span class="string">      these are translated into '\n' before being returned to the</span></span><br><span class="line"><span class="string">      caller. If it is '', universal newline mode is enabled, but line</span></span><br><span class="line"><span class="string">      endings are returned to the caller untranslated. If it has any of</span></span><br><span class="line"><span class="string">      the other legal values, input lines are only terminated by the given</span></span><br><span class="line"><span class="string">      string, and the line ending is returned to the caller untranslated.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    * On output, if newline is None, any '\n' characters written are</span></span><br><span class="line"><span class="string">      translated to the system default line separator, os.linesep. If</span></span><br><span class="line"><span class="string">      newline is '' or '\n', no translation takes place. If newline is any</span></span><br><span class="line"><span class="string">      of the other legal values, any '\n' characters written are translated</span></span><br><span class="line"><span class="string">      to the given string.</span></span><br><span class="line"><span class="string">    ……</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>翻译下大概意思：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Newline控制通用换行符的工作方式(它只适用于文本</span><br><span class="line">模式)。它可以是<span class="literal">None</span>， <span class="string">''</span>， <span class="string">'\n'</span>， <span class="string">'\r'</span>和<span class="string">'\r\n'</span>。它的工作原理是</span><br><span class="line">如下:</span><br><span class="line"></span><br><span class="line">*在输入时，如果newline为<span class="literal">None</span>，则通用换行模式为</span><br><span class="line">启用。输入中的行可以以<span class="string">'\n'</span>， <span class="string">'\r'</span>，或<span class="string">'\r\n'</span>和</span><br><span class="line">在返回给。之前，这些被翻译成<span class="string">'\n'</span></span><br><span class="line">调用者。如果是<span class="string">"，则启用通用换行模式</span></span><br><span class="line"><span class="string">未翻译的结尾返回给调用者。如果它有任何</span></span><br><span class="line"><span class="string">其他合法的值，输入行只在给定值结束</span></span><br><span class="line"><span class="string">字符串，并将行结束符未翻译返回给调用者。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*在输出时，如果newline为None，则写入的任何'\n'字符均为</span></span><br><span class="line"><span class="string">转换为系统默认的行分隔符os.linesep。如果</span></span><br><span class="line"><span class="string">Newline为''或'\n'，不发生翻译。如果newline是any</span></span><br><span class="line"><span class="string">对于其他合法值，任何'\n'字符都要翻译</span></span><br><span class="line"><span class="string">到给定的字符串。</span></span><br></pre></td></tr></table></figure><p>我们可以看到在输出时，如果没有定义时按照os.linesep进行输出的，我们看下这是啥：<br>(电脑是Windows，默认换行符为<code>\r\n</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(<span class="string">'os.linesep前面'</span>, os.linesep, <span class="string">'os.linesep后面'</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.linesep前面 </span><br><span class="line"> os.linesep后面</span><br></pre></td></tr></table></figure><p>但是好像看不出啥东西，因为换行符 <code>\r\n</code>都 是不可打印字符，再试下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># print('os.linesep前面', os.linesep, 'os.linesep后面')</span></span><br><span class="line">print(int(os.linesep))</span><br></pre></td></tr></table></figure><p>输出报错了，但是我得到想要的了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(int(os.linesep))</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">'\r\n'</span></span><br></pre></td></tr></table></figure><p>然后后面百度发现原来直接在命令行是可以显示的，如下：</p><p><img src="https://img-blog.csdnimg.cn/b5f21d1a46b84d059bd9d84175b4c20e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考：<a href="https://www.cnblogs.com/jeancheng/p/13759550.html" target="_blank" rel="noopener">https://www.cnblogs.com/jeancheng/p/13759550.html</a></p><p>也就是说默认情况下，<code>\r\n</code> 中的 <code>\n</code> 会被替换成系统的换行符，即<code>\r\n</code>，因此替换后就是<code>\r\r\n</code>。</p><p>用notepad++打开文件，显示所有字符，是这样的（哦，果然是这样）：<br><img src="https://img-blog.csdnimg.cn/b8a399f2e7a04b2d8f561c77a307d7bb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>问题找到了，也可以进行处理了，文档中也有相关介绍，把它置为空字符串就行了<code>newline=&quot;&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">"测试1"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试2"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试3"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试4"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">    (<span class="string">"测试5"</span>, <span class="string">'软件测试工程师'</span>),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">filename = <span class="string">'test.csv'</span></span><br><span class="line">f = open(filename, <span class="string">'w'</span>, encoding=<span class="string">'UTF8'</span>, newline=<span class="string">""</span>)</span><br><span class="line">writer = csv.writer(f)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    writer.writerow(i)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># read</span></span><br><span class="line">f = csv.reader(open(filename, <span class="string">'r'</span>, encoding=<span class="string">'UTF8'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'测试1'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[<span class="string">'测试2'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[<span class="string">'测试3'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[<span class="string">'测试4'</span>, <span class="string">'软件测试工程师'</span>]</span><br><span class="line">[<span class="string">'测试5'</span>, <span class="string">'软件测试工程师'</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/322706b680714c7882be2a90900f1a99.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;csv文件格式&quot;&gt;CSV文件格式&lt;/h2&gt;
&lt;p&gt;CSV （逗号分隔值文件格式）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。&lt;/p&gt;
&lt;p&gt;转自：&lt;a href=&quot;https://baike.baidu.com/item/CSV/10739?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSV(逗号分隔值文件格式) - 百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;纯文本打开：中间有逗号分隔&lt;br&gt;
以Excel方式打开：类似于表格，没有逗号分隔（逗号作为分隔符，但是不显示）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python基础" scheme="https://yansheng836.github.io/tags/python-basic/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm常用配置大杂烩--让IDE更懂你</title>
    <link href="https://yansheng836.github.io/article/550bc7dd.html"/>
    <id>https://yansheng836.github.io/article/550bc7dd.html</id>
    <published>2021-08-06T12:45:25.000Z</published>
    <updated>2021-09-12T10:12:25.341Z</updated>
    
    <content type="html"><![CDATA[<p>收集了一些个人在日常中可能会用到的一些设置，希望这些操作能让我们能够有效提高我们的开发效率。</p><a id="more"></a><h2 id="设置项目编码file-encoding">设置项目编码File Encoding</h2><p>用处：设置项目全局编码，防止乱码。</p><p>步骤：左上角File–&gt;Settings–&gt;Editor–&gt;File Encoding</p><p>设置为对应的编码即可（我这里是设置的UTF-8）<br><img src="https://img-blog.csdnimg.cn/0657fe6f5f0143278d748e0a034ac526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>上面这个只是设置了当前打开项目的设置，如果需要设置其他项目也适用的<strong>全局的配置</strong>，需要从这里进去：</p><p>左上角File–&gt;Settings for New Project–&gt;Editor–&gt;File Encoding</p><h2 id="设置文件模板file-and-code-template">设置文件模板File and Code Template</h2><p>用处：新建对应类型的文件时，自动生成一些自定义的代码。</p><p>步骤：左上角File–&gt;Settings–&gt;Editor–&gt;File and Code Template</p><p><img src="https://img-blog.csdnimg.cn/72b6c4b69a4d419694749cf56a334471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>填入你喜欢的模板，例如这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: yourname</span></span><br><span class="line"><span class="string">@file: $&#123;NAME&#125;.py</span></span><br><span class="line"><span class="string">@time: $&#123;DATE&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>因此当你新建python文件时，会自动生成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: yourname</span></span><br><span class="line"><span class="string">@file: test22.py</span></span><br><span class="line"><span class="string">@time: 2021/08/06</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>官网介绍：<a href="https://www.jetbrains.com/help/pycharm/using-file-and-code-templates.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/using-file-and-code-templates.html</a></p><h2 id="设置快捷模板live-templates">设置快捷模板Live templates</h2><p>用处：编码时，输入一些标志，自动带出我们定义好的模板。</p><p>步骤：左上角File–&gt;Settings–&gt;Editor–&gt;Live templates</p><p><img src="https://img-blog.csdnimg.cn/ce57a8002e0d41e2bbda37f15f8573e4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>例如这个自带的main模板，你在python文件中输入main时，会自动生成下面这个代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br></pre></td></tr></table></figure><p>你可以自己添加一些常用的模板，当然你也可以记一下这里的默认的模块，可以有效提高编码效率。</p><p>官网介绍：<a href="https://www.jetbrains.com/help/pycharm/using-live-templates.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/using-live-templates.html</a></p><h2 id="typo单词拼写错误提醒问题">typo单词拼写错误提醒问题</h2><p>IDE默认开始这个单词拼写错误提醒功能，这是一个很不错的功能（<strong>特点</strong>），这样当你单词拼写错的，它会给你一个提示，这样你可以对它进行修正。</p><p><img src="https://img-blog.csdnimg.cn/39256fe324e7491d8d5aef7ba6cd6d8f.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Spellchecker inspection helps locate typos <span class="keyword">and</span> misspelling <span class="keyword">in</span> your code, comments <span class="keyword">and</span> literals, <span class="keyword">and</span> fix them <span class="keyword">in</span> one click.</span><br><span class="line">拼写检查程序可以帮助您定位代码、注释和文字中的拼写错误，并在一次单击中修复它们。</span><br></pre></td></tr></table></figure><p>比如图片中的dirdath，就有这样的提示，然后我们按照驼峰命名法重新命名后dirPath，它就不会再提醒了 。</p><p>但是有时候我们不希望它对某些特定的单词进行提示时（比如自己的名字拼音），我们可以这样做。</p><h3 id="处理方法">处理方法</h3><p><strong>方法1</strong>：将该单词添加到项目级别的字典中，然后他就不会再提示了。</p><p>点击单词右键–&gt;Spelling–Save ‘word’ to project-leveldictionary。</p><p>文件保存位置：<code>（项目根目录）.idea/dictionaries/Administrator.xml</code> ，其中Administrator表示计算机当前用户名。<br><img src="https://img-blog.csdnimg.cn/837778a2db9e4bd88a8874f2c551df79.png" alt="在这里插入图片描述"><br><strong>方法2</strong>：彻底关闭这个提醒功能。</p><p>步骤：左上角File–&gt;Settings–&gt;Editor–&gt;Inspection --&gt;搜索typo，取消这个勾选，保存。<br><img src="https://img-blog.csdnimg.cn/59a6c6bc39d24d50b4e3cac6238d8ceb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="设置文件换行符格式">设置文件换行符格式</h2><p>一般情况下IDE都会设置跟系统一直的换行符，我的是Windows，即<code>\r\n</code>，但是我一般习惯设置成Unix格式的，即<code>\n</code>。</p><p>步骤：左上角File–&gt;Settings–&gt;Code Style --&gt;Line separator，设置为需要的，保存。</p><p><img src="https://img-blog.csdnimg.cn/c4da04c48bec4a46b904e076bedd4df3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="pycharm打开csv文件">PyCharm打开csv文件</h2><p>默认情况下打开CSV文件可能会乱码，我们可以通过安装插件解决这个问题。</p><p>有时候打开CSV文件时会自动提醒不支持，可以安装插件，那么我们直接点击安装就行了。</p><p>如果没有提醒的话，我们就需要自己去插件那里搜索安装下：</p><p>步骤：左上角File–&gt;Settings–&gt;Plugins --&gt; Install JetBrains plugins --&gt;搜索下面这3个插件，然后安装就行了。</p><p><img src="https://img-blog.csdnimg.cn/6062113896724358b1818e74b8a21b06.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集了一些个人在日常中可能会用到的一些设置，希望这些操作能让我们能够有效提高我们的开发效率。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
      <category term="Python基础" scheme="https://yansheng836.github.io/tags/python-basic/"/>
    
      <category term="开发工具" scheme="https://yansheng836.github.io/tags/development-tool/"/>
    
  </entry>
  
  <entry>
    <title>Linux查询本机的内网IP和外网IP</title>
    <link href="https://yansheng836.github.io/article/7e1807e.html"/>
    <id>https://yansheng836.github.io/article/7e1807e.html</id>
    <published>2021-08-05T05:23:30.000Z</published>
    <updated>2021-09-12T10:17:43.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询本机内网ip地址-ifconfig">查询本机内网IP地址-ifconfig</h2><p>这里的eth0 的 inet 的值 <code>172.14.116.91</code> 即使内网ip。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zejd98t~]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.14.116.91  netmask 255.255.240.0  broadcast 172.14.127.255</span><br><span class="line">        inet6 fe80::216:3eff:fe15:b7f3  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:16:3e:15:b7:f3  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 39472104  bytes 15521220904 (14.4 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 38258459  bytes 15199147861 (14.1 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 17170519  bytes 9777458856 (9.1 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 17170519  bytes 9777458856 (9.1 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        </span><br><span class="line">[root@iZ2zejd98t~]# ifconfig eth0</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.14.116.91  netmask 255.255.240.0  broadcast 172.14.127.255</span><br><span class="line">        inet6 fe80::216:3eff:fe15:b7f3  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:16:3e:15:b7:f3  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 39472688  bytes 15521320121 (14.4 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 38259098  bytes 15199345538 (14.1 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="说明">说明</h3><ol><li><code>eth0</code>：是指第一个物理网卡，具体叫光纤以太网接口卡，学名 Fiber Ethernet Adapter0。物理网卡这里指的是服务器上实际的网络接口设备，这里我服务器上双网卡，在系统中看到多个物理网卡则分别对应 eth0、eth1、eth2…，类似 Windows 装了好几个网卡，会显示本地连接1、本地连接2、本地连接3…</li><li><code>lo</code>：localhost 本地连接，127.0.0.1。</li><li><code>en0</code>：en0 是逻辑上的网络接口名，enx(x是一个数字，代表第几块网卡)是标准以太网接口，ent0 是物理设备，en0 是逻辑设备。查看网络接口信息时，假设看到三个网络接口，en0, en1, en2，但是只有 en1 的状态是 Available 的，说明目前只有这个口已经插上网线在使用，而其它的并没有在用。</li></ol><h3 id="或者使用ip命令">或者使用ip命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zejd98t logs]$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:22:03:cd brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.14.116.91/24 brd 10.0.19.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 306206694sec preferred_lft 306206694sec</span><br></pre></td></tr></table></figure><h2 id="查询本机外网-ip-地址">查询本机外网 IP 地址</h2><p>这里主要是通过访问一些网站来返回本地对应的外网ip，因为时间等诸多原因有些网址可能已经失效，下面是我收集的一些网址。</p><p>比如：访问 ：<a href="http://www.cip.cc/" target="_blank" rel="noopener">http://www.cip.cc/</a> ，返回电脑本机外网ip。</p><blockquote><p><strong>该网址描述</strong>：<br>查IP(<a href="http://www.cip.cc" target="_blank" rel="noopener">www.cip.cc</a>)网站, 提供免费的IP查询服务,命令行查询IP, 并且支持’PC网站, 手机网站, 命令行(Windows/UNIX/Linux)’ 三大平台, 是个多平台的IP查询网站, 更新即使, 数据准确是我们的目标</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a947ceb3b1e0474e8831e2e688e419aa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@iZ2zejd98t</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl cip.cc</span></span><br><span class="line">IP      : 120.234.191.42</span><br><span class="line">地址    : 中国  广东  汕头</span><br><span class="line">运营商  : 移动</span><br><span class="line"></span><br><span class="line">数据二  : 广东省汕头市 | 移动</span><br><span class="line"></span><br><span class="line">数据三  : 中国广东广州 | 移动</span><br><span class="line"></span><br><span class="line">URL     : http://www.cip.cc/120.234.191.42</span><br><span class="line"></span><br><span class="line">root@iZ2zejd98t</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl icanhazip.com</span></span><br><span class="line">120.234.191.42</span><br><span class="line"></span><br><span class="line">root@iZ2zejd98t</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl whatismyip.akamai.com</span></span><br><span class="line">120.234.191.42</span><br><span class="line"></span><br><span class="line">root@iZ2zejd98t</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl myip.ipip.net</span></span><br><span class="line">当前 IP：120.234.191.42  来自于：中国 广东 广州  移动</span><br><span class="line"></span><br><span class="line">root@iZ2zejd98t</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl http://members.3322.org/dyndns/getip</span></span><br><span class="line">120.234.191.42</span><br><span class="line"></span><br><span class="line">root@iZ2zejd98t</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl ident.me</span></span><br><span class="line">120.234.191.42</span><br></pre></td></tr></table></figure><hr><p>参考：<a href="https://blog.csdn.net/liaowenxiong/article/details/107688426" target="_blank" rel="noopener">https://blog.csdn.net/liaowenxiong/article/details/107688426</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查询本机内网ip地址-ifconfig&quot;&gt;查询本机内网IP地址-ifconfig&lt;/h2&gt;
&lt;p&gt;这里的eth0 的 inet 的值 &lt;code&gt;172.14.116.91&lt;/code&gt; 即使内网ip。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@iZ2zejd98t~]# ifconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inet 172.14.116.91  netmask 255.255.240.0  broadcast 172.14.127.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inet6 fe80::216:3eff:fe15:b7f3  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ether 00:16:3e:15:b7:f3  txqueuelen 1000  (Ethernet)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RX packets 39472104  bytes 15521220904 (14.4 GiB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RX errors 0  dropped 0  overruns 0  frame 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TX packets 38258459  bytes 15199147861 (14.1 GiB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inet 127.0.0.1  netmask 255.0.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inet6 ::1  prefixlen 128  scopeid 0x10&amp;lt;host&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop  txqueuelen 1000  (Local Loopback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RX packets 17170519  bytes 9777458856 (9.1 GiB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RX errors 0  dropped 0  overruns 0  frame 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TX packets 17170519  bytes 9777458856 (9.1 GiB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@iZ2zejd98t~]# ifconfig eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inet 172.14.116.91  netmask 255.255.240.0  broadcast 172.14.127.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inet6 fe80::216:3eff:fe15:b7f3  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ether 00:16:3e:15:b7:f3  txqueuelen 1000  (Ethernet)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RX packets 39472688  bytes 15521320121 (14.4 GiB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RX errors 0  dropped 0  overruns 0  frame 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TX packets 38259098  bytes 15199345538 (14.1 GiB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://yansheng836.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Navicat 的连接配置</title>
    <link href="https://yansheng836.github.io/article/1aa5e00d.html"/>
    <id>https://yansheng836.github.io/article/1aa5e00d.html</id>
    <published>2021-08-04T10:43:10.000Z</published>
    <updated>2021-09-12T10:17:06.583Z</updated>
    
    <content type="html"><![CDATA[<p>navicat的连接配置</p><p>regedit.exe</p><p>REG_SZ<br><a href="https://zhidao.baidu.com/question/272755496.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/272755496.html</a></p><p><img src="https://img-blog.csdnimg.cn/ab909e10e6ce477cb678b585e005ec68.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考：<a href="https://bbs.csdn.net/topics/393711927" target="_blank" rel="noopener">https://bbs.csdn.net/topics/393711927</a></p><a id="more"></a><p>大致路径：<code>计算机\HKEY_USERS\S-1-5-21-3070403362-4279873263-3053120353-500\SOFTWARE\PremiumSoft\NavicatPG\Servers\</code><br>其中<code>\S-1-5-21-3070403362-4279873263-3053120353-500\</code> 这个好像因为Navicat版本（或者Windows版本）不一样会有所差异。</p><p><img src="https://img-blog.csdnimg.cn/28c2119b040b4afa987dcca93b21fff2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>Navicat 文件位置：<a href="http://www.navicat.com.cn/manual/online_manual/cn/navicat/win_manual/options_file_location.html" target="_blank" rel="noopener">http://www.navicat.com.cn/manual/online_manual/cn/navicat/win_manual/options_file_location.html</a><br>Navicat 高级设置：<a href="http://www.navicat.com.cn/manual/online_manual/cn/navicat/win_manual/con_adv_settings.html" target="_blank" rel="noopener">http://www.navicat.com.cn/manual/online_manual/cn/navicat/win_manual/con_adv_settings.html</a><br>Navicat 日志文件：<a href="http://www.navicat.com.cn/manual/online_manual/cn/navicat/win_manual/log_files.html" target="_blank" rel="noopener">http://www.navicat.com.cn/manual/online_manual/cn/navicat/win_manual/log_files.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;navicat的连接配置&lt;/p&gt;
&lt;p&gt;regedit.exe&lt;/p&gt;
&lt;p&gt;REG_SZ&lt;br&gt;
&lt;a href=&quot;https://zhidao.baidu.com/question/272755496.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhidao.baidu.com/question/272755496.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/ab909e10e6ce477cb678b585e005ec68.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://bbs.csdn.net/topics/393711927&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bbs.csdn.net/topics/393711927&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
  </entry>
  
  <entry>
    <title>博客gravatar头像访问失效问题处理</title>
    <link href="https://yansheng836.github.io/article/33cfeef5.html"/>
    <id>https://yansheng836.github.io/article/33cfeef5.html</id>
    <published>2021-08-03T05:29:27.000Z</published>
    <updated>2021-09-12T10:08:59.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>个人博客的Valine评论的头像使用的是gravatar，使用了镜像 <a href="https://gravatar.loli.net/" target="_blank" rel="noopener">https://gravatar.loli.net/</a> （详见：<a href="https://valine.js.org/avatar.html" target="_blank" rel="noopener">valine 头像配置</a>），之前刚配置是可以正常使用，但是最近发现头像都挂了，如下：</p><p><img src="https://img-blog.csdnimg.cn/ca74a7da3d204be388e953c9957e3121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="分析">分析</h2><p>之前遇到类似问题一般都是添加对应ip映射到hosts的，就像访问GitHub失效一样。</p><h2 id="步骤">步骤</h2><h3 id="步骤1-ping-域名">步骤1.ping 域名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;ping gravatar.loli.net</span><br><span class="line"></span><br><span class="line">正在 Ping cdnjs-jp.loli.net [103.201.128.233] 具有 32 字节的数据:</span><br><span class="line">来自 103.201.128.233 的回复: 字节=32 时间=71ms TTL=47</span><br><span class="line">来自 103.201.128.233 的回复: 字节=32 时间=74ms TTL=47</span><br><span class="line">来自 103.201.128.233 的回复: 字节=32 时间=76ms TTL=47</span><br><span class="line">来自 103.201.128.233 的回复: 字节=32 时间=99ms TTL=47</span><br><span class="line"></span><br><span class="line">103.201.128.233 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 71ms，最长 = 99ms，平均 = 80ms</span><br></pre></td></tr></table></figure><h3 id="步骤2-添加到hosts">步骤2.添加到hosts</h3><p>将这个添加到hosts（一般是 <code>C:\Windows\System32\drivers\etc\hosts</code> ）就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">103.201.128.233  gravatar.loli.net</span><br></pre></td></tr></table></figure><hr><h2 id="附注">附注</h2><p>对应通用的gravatar网站，即 <a href="http://www.gravatar.com" target="_blank" rel="noopener">www.gravatar.com</a> ,如果失效我们可以通过类似的方式达到这个效果（ps:具体ip建议先ping）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">93.184.220.20 s.gravatar.com</span><br><span class="line">93.184.220.20 0.gravatar.com</span><br><span class="line">93.184.220.20 1.gravatar.com</span><br><span class="line">93.184.220.20 2.gravatar.com</span><br></pre></td></tr></table></figure><hr><p>附：怎么在Gravatar网站上进行设置自己的头像，并通过URL获取：<a href="https://blog.csdn.net/qq_38796548/article/details/102725696" target="_blank" rel="noopener">https://blog.csdn.net/qq_38796548/article/details/102725696</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;个人博客的Valine评论的头像使用的是gravatar，使用了镜像 &lt;a href=&quot;https://gravatar.loli.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gravatar.loli.net/&lt;/a&gt; （详见：&lt;a href=&quot;https://valine.js.org/avatar.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;valine 头像配置&lt;/a&gt;），之前刚配置是可以正常使用，但是最近发现头像都挂了，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/ca74a7da3d204be388e953c9957e3121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
      <category term="Hexo" scheme="https://yansheng836.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python中字符串String去除出换行符(\n,\r)和空格的问题</title>
    <link href="https://yansheng836.github.io/article/5759927c.html"/>
    <id>https://yansheng836.github.io/article/5759927c.html</id>
    <published>2021-08-01T14:15:50.000Z</published>
    <updated>2021-09-12T10:11:19.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python中字符串string去除出换行符和空格的问题-n-r">Python中字符串String去除出换行符和空格的问题（\n,\r）</h2><p>在Python的编写过程中，获取到的字符串进场存在不明原因的换行和空格，如何整合成一个单句，成为问题。</p><a id="more"></a><p>方法：</p><h3 id="一-去除空格">一、去除空格</h3><p>“ · ”代表的为空格</p><p>strip()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"···xyz···"</span>.strip()            <span class="comment"># returns "xyz"  </span></span><br><span class="line"><span class="string">"···xyz···"</span>.lstrip()           <span class="comment"># returns "xyz···"  </span></span><br><span class="line"><span class="string">"···xyz···"</span>.rstrip()           <span class="comment"># returns "···xyz"  </span></span><br><span class="line"><span class="string">"··x·y·z··"</span>.replace(<span class="string">' '</span>, <span class="string">''</span>)   <span class="comment"># returns "xyz"</span></span><br></pre></td></tr></table></figure><h3 id="二-替换-replace-space">二、替换 <code>replace(&quot;space&quot;,&quot;&quot;)</code></h3><p>用 <code>replace(&quot;\n&quot;, &quot;&quot;)</code>，与 <code>replace(&quot;\r&quot;, &quot;&quot;)</code>，后边的内容替换掉前边的。</p><p>实际问题：</p><p>如图：</p><p>string中内容</p><p><img src="https://img-blog.csdn.net/20180715113106561?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5Z2FvbGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>其中，“ · ”代表的为空格，一段话被换行成了几段。</p><p>1.使用 <code>.strip()</code> 只能够去除字符串首尾的空格，不能够去除中间的空格。如图：</p><p><img src="https://img-blog.csdn.net/20180715113056973?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5Z2FvbGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>所以需要使用 <code>.replace(' ', '')</code> 来替换空格项。<code>string.replace(' ', '')</code>。如图：</p><p><img src="https://img-blog.csdn.net/20180715113031300?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5Z2FvbGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>2.使用 <code>.replace('\n', '')</code> 去除换行。如图：并不能达到效果。</p><p><img src="https://img-blog.csdn.net/20180715112957749?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5Z2FvbGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>原因在于：在python中存在继承了 回车符\r 和 换行符\n 两种标记。</p><p><code>\r</code>和<code>\n</code> 都是以前的那种打字机传承来的。</p><p><code>\r</code> 代表回车，也就是打印头归位，回到某一行的开头。</p><p><code>\n</code>代表换行，就是走纸，下一行。</p><p>linux只用<code>\n</code>换行。</p><p>win下用<code>\r\n</code>表示换行。</p><p>python中同样一句话：<code>print (u'前面的内容\r只显示后面的内容')</code></p><p>所以，在去除换行时，需要同时去除两者才行，即使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">'\r'</span>, <span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://img-blog.csdn.net/2018071511293694?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5Z2FvbGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><hr><p>转自：<a href="https://blog.csdn.net/jerrygaoling/article/details/81051447" target="_blank" rel="noopener">https://blog.csdn.net/jerrygaoling/article/details/81051447</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python中字符串string去除出换行符和空格的问题-n-r&quot;&gt;Python中字符串String去除出换行符和空格的问题（\n,\r）&lt;/h2&gt;
&lt;p&gt;在Python的编写过程中，获取到的字符串进场存在不明原因的换行和空格，如何整合成一个单句，成为问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python基础" scheme="https://yansheng836.github.io/tags/python-basic/"/>
    
  </entry>
  
  <entry>
    <title>Notepad++格式化JSON</title>
    <link href="https://yansheng836.github.io/article/9a173e5b.html"/>
    <id>https://yansheng836.github.io/article/9a173e5b.html</id>
    <published>2021-07-31T10:15:31.000Z</published>
    <updated>2021-09-12T10:16:32.448Z</updated>
    
    <content type="html"><![CDATA[<p>插件–&gt;插件管理–&gt;可用–&gt;搜索json，找到json viewer–&gt;安装（成功后自动重启）</p><a id="more"></a><p>使用：点击插件，找到json viewer，点击格式化就行了，当然也可以使用快捷键Ctrl+shift+alt+M</p><p><img src="https://img-blog.csdnimg.cn/20210409180141454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210409180221751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210409180328775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210409180415446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>参考：<br><a href="https://blog.csdn.net/qq_39052982/article/details/92977827" target="_blank" rel="noopener">https://blog.csdn.net/qq_39052982/article/details/92977827</a><br><a href="https://jingyan.baidu.com/article/5225f26baffaf3e6fb090877.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/5225f26baffaf3e6fb090877.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;插件–&amp;gt;插件管理–&amp;gt;可用–&amp;gt;搜索json，找到json viewer–&amp;gt;安装（成功后自动重启）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Notepad++" scheme="https://yansheng836.github.io/tags/notepad/"/>
    
  </entry>
  
  <entry>
    <title>NPM相关问题</title>
    <link href="https://yansheng836.github.io/article/3703e674.html"/>
    <id>https://yansheng836.github.io/article/3703e674.html</id>
    <published>2021-07-31T10:10:11.000Z</published>
    <updated>2021-09-12T10:15:20.904Z</updated>
    
    <content type="html"><![CDATA[<p>NPM相关问题</p><h2 id="npm是什么">npm是什么</h2><p>NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。</p><a id="more"></a><h2 id="npm官网">npm官网</h2><p><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p><p><img src="https://img-blog.csdnimg.cn/1f74ddedf8ac4983812ff9be9fc7c5ac.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NPM相关问题&lt;/p&gt;
&lt;h2 id=&quot;npm是什么&quot;&gt;npm是什么&lt;/h2&gt;
&lt;p&gt;NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Node.js" scheme="https://yansheng836.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>npm 通过package.json来安装第三方包</title>
    <link href="https://yansheng836.github.io/article/bf58ba05.html"/>
    <id>https://yansheng836.github.io/article/bf58ba05.html</id>
    <published>2021-07-31T10:05:44.000Z</published>
    <updated>2021-09-12T09:05:22.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm-通过package-json来安装第三方包"><a href="https://www.cnblogs.com/tutumissed/p/8276221.html" target="_blank" rel="noopener">npm 通过package.json来安装第三方包</a></h2><p>通过package.json来安装第三方包</p><ol><li><p>将package.json文件拷贝到项目，在当前目录打开命令行</p></li><li><p>安装： npm install --production</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/bcffa3abbecdc4616ccba6a241c24488.png" alt="img"></p><p><a href="https://segmentfault.com/a/1190000022829431" target="_blank" rel="noopener">npm之package.json解析并执行</a><br><a href="https://www.cnblogs.com/sese/p/10119511.html" target="_blank" rel="noopener">npm安装package.json中的模块依赖</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;npm-通过package-json来安装第三方包&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/tutumissed/p/8276221.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm 通过package.
      
    
    </summary>
    
    
    
      <category term="Node.js" scheme="https://yansheng836.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>npm 常用命令详解</title>
    <link href="https://yansheng836.github.io/article/75bb359.html"/>
    <id>https://yansheng836.github.io/article/75bb359.html</id>
    <published>2021-07-31T09:50:52.000Z</published>
    <updated>2021-09-12T10:15:35.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm是什么">npm是什么</h2><p>NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。</p><a id="more"></a><h2 id="npm-install-安装模块">npm install 安装模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install (with no args, in package dir)</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</span><br><span class="line">npm install &lt;tarball file&gt;</span><br><span class="line">npm install &lt;tarball url&gt;</span><br><span class="line">npm install &lt;folder&gt;</span><br><span class="line"></span><br><span class="line">alias: npm i</span><br><span class="line">common options: [-S|--save|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [--dry-run]</span><br></pre></td></tr></table></figure><p>安装包，默认会安装最新的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f5a11865441a08240a1f7a3991c299f8.png" alt="img"></p><p>安装指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp@3.9.1</span><br></pre></td></tr></table></figure><p>安装包并将信息保持到项目的package.json文件中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c156d00602b01b97dbc0ef0cbeb216b3.png" alt="img"></p><p>项目对模块的依赖可以使用下面的 3 种方法来表示（假设当前版本号是 1.1.0 ）：</p><ul><li>兼容模块新发布的补丁版本：~1.1.0、1.1.x、1.1</li><li>兼容模块新发布的小版本、补丁版本：^1.1.0、1.x、1</li><li>兼容模块新发布的大版本、小版本、补丁版本：*、x</li></ul><p><strong>-S, --save 安装包信息将加入到dependencies（生产阶段的依赖）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save 或 npm install gulp -S</span><br></pre></td></tr></table></figure><p>package.json 文件的 dependencies 字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "gulp": "^3.9.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>-D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev 或 npm install gulp -D</span><br></pre></td></tr></table></figure><p>package.json 文件的 devDependencies字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">            </span><br><span class="line">    "gulp": "^3.9.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>-O, --save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-optional 或 npm install gulp -O</span><br></pre></td></tr></table></figure><p>package.json 文件的optionalDependencies字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"optionalDependencies": &#123;</span><br><span class="line">            </span><br><span class="line">    "gulp": "^3.9.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>-E, --save-exact 精确安装指定模块版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-exact 或 npm install gulp -E</span><br></pre></td></tr></table></figure><p>输入命令**npm install gulp -ES，<strong>留意package.json 文件的 dependencies 字段，以看出版本号中的</strong>^**消失了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">            </span><br><span class="line">    "gulp": "3.9.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e392d965c69ebdff7b80c763d5e7b663.png" alt="img"></p><p>本地安装（local）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp</span><br></pre></td></tr></table></figure><p>全局安装（global）,使用 -g 或 --global</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><h2 id="npm-uninstall-卸载模块">npm uninstall 卸载模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]... [-S|--save|-D|--save-dev|-O|--save-optional]</span><br><span class="line"></span><br><span class="line">aliases: remove, rm, r, un, unlink</span><br></pre></td></tr></table></figure><p>如卸载开发版本的模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall gulp --save-dev</span><br></pre></td></tr></table></figure><h2 id="npm-update-更新模块">npm update 更新模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update [-g] [&lt;pkg&gt;...]</span><br></pre></td></tr></table></figure><h2 id="npm-outdated-检查模块是否已经过时">npm outdated 检查模块是否已经过时</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm outdated [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</span><br></pre></td></tr></table></figure><p>此命令会列出所有已经过时的包，可以及时进行包的更新</p><p><img src="https://img-blog.csdnimg.cn/img_convert/40f39be6dc5d6a7faac44829ea9f4edc.png" alt="img"></p><h2 id="npm-ls-查看安装的模块">npm ls 查看安装的模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm ls [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</span><br><span class="line"></span><br><span class="line">aliases: list, la, ll</span><br></pre></td></tr></table></figure><p>查看全局安装的模块及依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g</span><br></pre></td></tr></table></figure><h2 id="npm-init-在项目中引导创建一个package-json文件">npm init 在项目中引导创建一个package.json文件</h2><p>安装包的信息可保持到项目的package.json文件中，以便后续的其它的项目开发或者他人合作使用，也说package.json在项目中是必不可少的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init [-f|--force|-y|--yes]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a0106ff7874808cd151cf161eacffcb3.gif" alt="img"></p><h2 id="npm-help-查看某条命令的详细帮助">npm help 查看某条命令的详细帮助</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm help &lt;term&gt; [&lt;terms..&gt;]</span><br></pre></td></tr></table></figure><p>例如输入<code>npm help install</code>，系统在默认的浏览器或者默认的编辑器中打开本地nodejs安装包的文件 <code>/nodejs/node_modules/npm/html/doc/cli/npm-install.html</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm help install</span><br></pre></td></tr></table></figure><h2 id="npm-root-查看包的安装路径">npm root 查看包的安装路径</h2><p>输出 node_modules的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root [-g]</span><br></pre></td></tr></table></figure><h2 id="npm-config-管理npm的配置路径">npm config 管理npm的配置路径</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm config set &lt;key&gt; &lt;value&gt; [-g|--global]</span><br><span class="line">npm config get &lt;key&gt;</span><br><span class="line">npm config delete &lt;key&gt;</span><br><span class="line">npm config list</span><br><span class="line">npm config edit</span><br><span class="line">npm get &lt;key&gt;</span><br><span class="line">npm set &lt;key&gt; &lt;value&gt; [-g|--global]</span><br></pre></td></tr></table></figure><p>对于config这块用得最多应该是<strong>设置代理，解决npm安装一些模块失败的问题</strong></p><p>例如我在公司内网，因为公司的防火墙原因，无法完成任何模块的安装，这个时候设置代理可以解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set proxy=http://xxx.com:8080</span><br></pre></td></tr></table></figure><p>又如国内的网络环境问题，某官方的IP可能被和谐了，幸好国内有好心人，搭建了镜像，此时我们简单设置镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry="http://r.cnpmjs.org"</span><br></pre></td></tr></table></figure><p>也可以临时配置，如安装淘宝镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="npm-cache-管理模块的缓存">npm cache 管理模块的缓存</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm cache add &lt;tarball file&gt;</span><br><span class="line">npm cache add &lt;folder&gt;</span><br><span class="line">npm cache add &lt;tarball url&gt;</span><br><span class="line">npm cache add &lt;name&gt;@&lt;version&gt;</span><br><span class="line"></span><br><span class="line">npm cache ls [&lt;path&gt;]</span><br><span class="line"></span><br><span class="line">npm cache clean [&lt;path&gt;]</span><br></pre></td></tr></table></figure><p>最常用命令无非清除npm本地缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br></pre></td></tr></table></figure><h2 id="npm-start-启动模块">npm start 启动模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start [-- &lt;args&gt;]</span><br></pre></td></tr></table></figure><p>该命令写在package.json文件scripts的start字段中，可以自定义命令来配置一个服务器环境和安装一系列的必要程序，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">            </span><br><span class="line">    &quot;start&quot;: &quot;gulp -ws&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在cmd中输入npm start命令相当于执行gulpfile.js文件自定义的watch和server命令。</p><p>如果package.json文件没有设置start，则将直接启动node server.js</p><h2 id="npm-stop-停止模块">npm stop 停止模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm stop [-- &lt;args&gt;]</span><br></pre></td></tr></table></figure><h2 id="npm-restart-重新启动模块">npm restart 重新启动模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm restart [-- &lt;args&gt;]</span><br></pre></td></tr></table></figure><h2 id="npm-test-测试模块">npm test 测试模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm test [-- &lt;args&gt;]</span><br><span class="line">npm tst [-- &lt;args&gt;]</span><br></pre></td></tr></table></figure><p>该命令写在package.json文件scripts的test字段中，可以自定义该命令来执行一些操作，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">            </span><br><span class="line">    &quot;test&quot;: &quot;gulp release&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此时在cmd中输入npm test命令相当于执行gulpfile.js文件自定义的release命令。</p><h2 id="npm-version-查看模块版本">npm version 查看模块版本</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br><span class="line"></span><br><span class="line">'npm [-v | --version]' to print npm version</span><br><span class="line">'npm view &lt;pkg&gt; version' to view a package's published version</span><br><span class="line">'npm ls' to inspect current package/dependency versions</span><br></pre></td></tr></table></figure><p>查看模块的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/aff9e29e85ed7f307971b7bc8d187c48.png" alt="img"></p><h2 id="npm-view-查看模块的注册信息">npm view 查看模块的注册信息</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm view [&lt;@scope&gt;/]&lt;name&gt;[@&lt;version&gt;] [&lt;field&gt;[.&lt;subfield&gt;]...]</span><br><span class="line"></span><br><span class="line">aliases: info, show, v</span><br></pre></td></tr></table></figure><p>查看模块的依赖关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view gulp dependencies</span><br></pre></td></tr></table></figure><p>查看模块的源文件地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view gulp repository.url</span><br></pre></td></tr></table></figure><p>查看模块的贡献者，包含邮箱地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view npm contributors</span><br></pre></td></tr></table></figure><h2 id="npm-adduser-用户登录">npm adduser 用户登录</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser [--registry=url] [--scope=@orgname] [--always-auth]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7fc926e8d1996cd2f9bfbc498c3a20f7.png" alt="img"></p><p>发布模板到npm社区前需要先登录，然后再进入发布的操作</p><h2 id="npm-publish-发布模块">npm publish 发布模块</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm publish [&lt;tarball&gt;|&lt;folder&gt;] [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;]</span><br><span class="line"></span><br><span class="line">Publishes '.' if no argument supplied</span><br><span class="line">Sets tag 'latest' if no --tag specified</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/28063e5e23a4431ea1dbfd1ad6ae9aea.png" alt="img"></p><h2 id="npm-access-在发布的包上设置访问级别">npm access 在发布的包上设置访问级别</h2><p>基础语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm access public [&lt;package&gt;]</span><br><span class="line">npm access restricted [&lt;package&gt;]</span><br><span class="line"></span><br><span class="line">npm access grant &lt;read-only|read-write&gt; &lt;scope:team&gt; [&lt;package&gt;]</span><br><span class="line">npm access revoke &lt;scope:team&gt; [&lt;package&gt;]</span><br><span class="line"></span><br><span class="line">npm access ls-packages [&lt;user&gt;|&lt;scope&gt;|&lt;scope:team&gt;]</span><br><span class="line">npm access ls-collaborators [&lt;package&gt; [&lt;user&gt;]]</span><br><span class="line">npm access edit [&lt;package&gt;]</span><br></pre></td></tr></table></figure><h2 id="npm-package-json的语法">npm package.json的语法</h2><p>英文原版：<a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">https://docs.npmjs.com/files/package.json</a></p><p>这块内容好多，国内有好心人整理：《<a href="https://github.com/ericdum/mujiang.info/issues/6/" target="_blank" rel="noopener">npm的package.json中文文档</a>》，从这份文档拷贝出一些比较常见的，如下：</p><p><strong>默认值</strong></p><p>npm会根据包内容设置一些默认值。</p><ul><li><code>&quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;}</code></li></ul><p>如果包的根目录有<code>server.js</code>文件，npm会默认将<code>start</code>命令设置为<code>node server.js</code>。</p><ul><li><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-waf clean || true; node-waf configure build&quot;}</code></li></ul><p>如果包的根目录有<code>wscript</code>文件，npm会默认将<code>preinstall</code>命令用node-waf进行编译。</p><ul><li><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-gyp rebuild&quot;}</code></li></ul><p>如果包的根目录有<code>binding.gyp</code>文件，npm会默认将<code>preinstall</code>命令用node-gyp进行编译。</p><ul><li><code>&quot;contributors&quot;: [...]</code></li></ul><p>如果包的根目录有<code>AUTHORS</code>文件，npm会默认逐行按<code>Name &lt;email&gt; (url)</code>格式处理，邮箱和url是可选的。#号和空格开头的行会被忽略。</p><p><strong>name</strong></p><p>在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。</p><p>name是这个东西的名字。注意：</p><ul><li>不要把node或者js放在名字中。因为你写了package.json它就被假定成为了js，不过你可以用&quot;engine&quot;字段指定一个引擎（见后文）。</li><li>这个名字会作为在URL的一部分、命令行的参数或者文件夹的名字。任何non-url-safe的字符都是不能用的。</li><li>这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰。</li><li>在你爱上你的名字之前，你可能要去npm registry查看一下这个名字是否已经被使用了。<a href="http://registry.npmjs.org/" target="_blank" rel="noopener">http://registry.npmjs.org/</a></li></ul><p><strong>version</strong></p><p>version必须能被<a href="https://github.com/isaacs/node-semver" target="_blank" rel="noopener">node-semver</a>解析，它被包在npm的依赖中。（要自己用可以执行<code>npm install semver</code>）</p><p>可用的“数字”或者“范围”见<a href="https://npmjs.org/doc/misc/semver.html" target="_blank" rel="noopener">semver(7)</a>.</p><p><strong>description</strong></p><p>放简介，字符串，方便在<code>npm search</code>中搜索</p><p><strong>keywords</strong></p><p>关键字，数组、字符串，方便在<code>npm search</code>中搜索</p><p><strong>bugs</strong></p><p>你项目的提交问题的url和（或）邮件地址</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            </span><br><span class="line"> <span class="attr">"url"</span> : <span class="string">"http://github.com/owner/project/issues"</span>, </span><br><span class="line"><span class="attr">"email"</span> : <span class="string">"project@hostname.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>license</strong></p><p>你应该要指定一个许可证，让人知道使用的权利和限制的。</p><p>最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">             <span class="attr">"license"</span> : <span class="string">"BSD"</span> &#125;</span><br></pre></td></tr></table></figure><p>如果你又更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"licenses" : [</span><br><span class="line">  &#123;</span><br><span class="line">             <span class="attr">"type"</span> : <span class="string">"MyLicense"</span></span><br><span class="line">  , <span class="attr">"url"</span> : <span class="string">"http://github.com/owner/project/path/to/license"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>repository</strong></p><p>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么<code>npm docs</code>命令能找到你。</p><p>这样做：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"repository" :</span><br><span class="line">  &#123;</span><br><span class="line">             <span class="attr">"type"</span> : <span class="string">"git"</span></span><br><span class="line">  , <span class="attr">"url"</span> : <span class="string">"http://github.com/isaacs/npm.git"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">"repository" :</span><br><span class="line">  &#123;</span><br><span class="line">             <span class="attr">"type"</span> : <span class="string">"svn"</span></span><br><span class="line">  , <span class="attr">"url"</span> : <span class="string">"http://v8.googlecode.com/svn/trunk/"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>URL应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的url。不应该是一个html的项目页面。因为它是给计算机看的。</p><p><strong>scripts</strong></p><p>“scripts”是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。</p><p>参考上面的<a href="https://www.cnblogs.com/PeunZhang/p/5553574.html#npm-start" target="_blank" rel="noopener">npm start</a>、<a href="https://www.cnblogs.com/PeunZhang/p/5553574.html#npm-test" target="_blank" rel="noopener">npm test</a>命令</p><p>更多详细请看 <a href="https://npmjs.org/doc/misc/npm-scripts.html" target="_blank" rel="noopener">npm-scripts(7)</a></p><p><strong>config</strong></p><p>“config” hash可以用来配置用于包脚本中的跨版本参数。在实例中，如果一个包有下面的配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            </span><br><span class="line"> <span class="attr">"name"</span> : <span class="string">"foo"</span>,</span><br><span class="line"> <span class="attr">"config"</span> : &#123;</span><br><span class="line">             <span class="attr">"port"</span> : <span class="string">"8080"</span> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有一个“start”命令引用了<code>npm_package_config_port</code>环境变量，用户可以通过<code>npm config set foo:port 8001</code>来重写他。</p><p>参见 <a href="https://npmjs.org/doc/misc/npm-config.html" target="_blank" rel="noopener">npm-config(7)</a> 和 <a href="https://npmjs.org/doc/misc/npm-scripts.html" target="_blank" rel="noopener">npm-scripts(7)</a>。</p><p><strong>dependencies</strong></p><p>依赖是给一组包名指定版本范围的一个hash。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用tarball或者git URL。</p><p>请不要将测试或过渡性的依赖放在<code>dependencies</code>hash中。见下文的<code>devDependencies</code></p><p><strong>详见<a href="https://npmjs.org/doc/misc/semver.html" target="_blank" rel="noopener">semver(7)</a>.</strong></p><ul><li><code>version</code> 必须完全和<code>version</code>一致</li><li><code>&gt;version</code> 必须比<code>version</code>大</li><li><code>&gt;=version</code> 同上</li><li><code>&lt;version</code> 同上</li><li><code>&lt;=version</code> 同上</li><li><code>~version</code> 大约一样，见<a href="https://npmjs.org/doc/misc/semver.html" target="_blank" rel="noopener">semver(7)</a></li><li><code>1.2.x</code> 1.2.0, 1.2.1, 等，但不包括1.3.0</li><li><code>http://...</code> 见下文’依赖URL’</li><li><code>*</code> 所有</li><li><code>&quot;&quot;</code> 空，同<code>*</code></li><li><code>version1 - version2</code> 同 <code>&gt;=version1 &lt;=version2</code>.</li><li><code>range1 || range2</code> 二选一。</li><li><code>git...</code> 见下文’依赖Git URL’</li><li><code>user/repo</code> 见下文’GitHub URLs’</li></ul><p>比如下面都是合法的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">             </span><br><span class="line"> <span class="attr">"dependencies"</span> :</span><br><span class="line">  &#123;</span><br><span class="line">             <span class="attr">"foo"</span> : <span class="string">"1.0.0 - 2.9999.9999"</span></span><br><span class="line">  , <span class="attr">"bar"</span> : <span class="string">"&gt;=1.0.2 &lt;2.1.2"</span></span><br><span class="line">  , <span class="attr">"baz"</span> : <span class="string">"&gt;1.0.2 &lt;=2.3.4"</span></span><br><span class="line">  , <span class="attr">"boo"</span> : <span class="string">"2.0.1"</span></span><br><span class="line">  , <span class="attr">"qux"</span> : <span class="string">"&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0"</span></span><br><span class="line">  , <span class="attr">"asd"</span> : <span class="string">"http://asdf.com/asdf.tar.gz"</span></span><br><span class="line">  , <span class="attr">"til"</span> : <span class="string">"~1.2"</span></span><br><span class="line">  , <span class="attr">"elf"</span> : <span class="string">"~1.2.3"</span></span><br><span class="line">  , <span class="attr">"two"</span> : <span class="string">"2.x"</span></span><br><span class="line">  , <span class="attr">"thr"</span> : <span class="string">"3.3.x"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>devDependencies</strong></p><p>如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。</p><p>在这种情况下，最好将这些附属的项目列在<code>devDependencies</code>中。</p><p>这些东西会在执行<code>npm link</code>或者<code>npm install</code>的时候初始化，并可以像其他npm配置参数一样管理。详见<a href="https://npmjs.org/doc/misc/npm-config.html" target="_blank" rel="noopener">npm-config(7)</a>。</p><p>对于非特定平台的构建步骤，比如需要编译CoffeeScript，可以用<code>prepublish</code>脚本去实现，并把它依赖的包放在devDependency中。（译者注：prepublish定义了在执行<code>npm publish</code>的时候先行执行的脚本）</p><p>比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">             <span class="attr">"name"</span>: <span class="string">"ethopia-waza"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"a delightfully fruity coffee varietal"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.2.3"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">            </span><br><span class="line">    <span class="attr">"coffee-script"</span>: <span class="string">"~1.6.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">            </span><br><span class="line">    <span class="attr">"prepublish"</span>: <span class="string">"coffee -o lib/ -c src/waza.coffee"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"lib/waza.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>prepublish</code>脚本会在publishing前运行，这样用户就不用自己去require来编译就能使用。并且在开发模式中（比如本地运行<code>npm install</code>）会运行这个脚本以便更好地测试。</p><hr><p>参考资料：</p><p><a href="https://docs.npmjs.com/#cli" target="_blank" rel="noopener">https://docs.npmjs.com/#cli</a></p><p><a href="https://github.com/ericdum/mujiang.info/issues/6/" target="_blank" rel="noopener">https://github.com/ericdum/mujiang.info/issues/6/</a></p><p><a href="https://segmentfault.com/a/1190000004221514" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004221514</a></p><hr><blockquote><p>转载<br>作者：白树<br>出处：<a href="http://peunzhang.cnblogs.com/" target="_blank" rel="noopener">http://peunzhang.cnblogs.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;npm是什么&quot;&gt;npm是什么&lt;/h2&gt;
&lt;p&gt;NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Node.js" scheme="https://yansheng836.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>2021年【CSDN毎周小结】</title>
    <link href="https://yansheng836.github.io/article/d8d10d6.html"/>
    <id>https://yansheng836.github.io/article/d8d10d6.html</id>
    <published>2021-07-18T07:49:54.000Z</published>
    <updated>2021-09-12T10:20:48.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>叮！你的【CSDN一周小结】新鲜出炉~<br>一周结束了，CSDN为你整理了好了本周小结，点击查看本周的【用户数据详情】，快去秀出你的战绩！</p></blockquote><p>CSDN用户每周一会收到一个上周数据汇总的消息推送：</p><p><img src="https://img-blog.csdnimg.cn/20210718143025546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><p>点击【用户数据详情】：</p><p><img src="https://img-blog.csdnimg.cn/20210718154810743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们可以发现网址：<a href="https://mp.csdn.net/poster/20210712" target="_blank" rel="noopener">https://mp.csdn.net/poster/20210712</a> ，内容是：07.05-07.11一周小结。<br>按照这个规律，我们得到2021年的历史每周小结（注：<strong>登录用户，点击是访问自己的数据</strong>）。</p><h2 id="2021年01月份毎周小结">2021年01月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210111" target="_blank" rel="noopener">01.04-01.10一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210118" target="_blank" rel="noopener">01.11-01.17一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210125" target="_blank" rel="noopener">01.18-01.24一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210201" target="_blank" rel="noopener">01.25-01.31一周小结</a></p><h2 id="2021年02月份毎周小结">2021年02月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210208" target="_blank" rel="noopener">02.01-02.07一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210215" target="_blank" rel="noopener">02.08-02.14一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210222" target="_blank" rel="noopener">02.15-02.21一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210301" target="_blank" rel="noopener">02.22-02.28一周小结</a></p><h2 id="2021年03月份毎周小结">2021年03月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210308" target="_blank" rel="noopener">03.01-03.07一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210315" target="_blank" rel="noopener">03.08-03.14一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210322" target="_blank" rel="noopener">03.15-03.21一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210329" target="_blank" rel="noopener">03.22-03.28一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210405" target="_blank" rel="noopener">03.29-04.04一周小结</a></p><h2 id="2021年04月份毎周小结">2021年04月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210412" target="_blank" rel="noopener">04.05-04.11一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210419" target="_blank" rel="noopener">04.12-04.18一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210426" target="_blank" rel="noopener">04.19-04.25一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210503" target="_blank" rel="noopener">04.26-05.02一周小结</a></p><h2 id="2021年05月份毎周小结">2021年05月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210510" target="_blank" rel="noopener">05.03-05.09一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210517" target="_blank" rel="noopener">05.10-05.16一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210524" target="_blank" rel="noopener">05.17-05.23一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210531" target="_blank" rel="noopener">05.24-05.30一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210607" target="_blank" rel="noopener">05.31-06.06一周小结</a></p><h2 id="2021年06月份毎周小结">2021年06月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210614" target="_blank" rel="noopener">06.07-06.13一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210621" target="_blank" rel="noopener">06.14-06.20一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210628" target="_blank" rel="noopener">06.21-06.27一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210705" target="_blank" rel="noopener">06.28-07.04一周小结</a></p><h2 id="2021年07月份毎周小结">2021年07月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210712" target="_blank" rel="noopener">07.05-07.11一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210719" target="_blank" rel="noopener">07.12-07.18一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210726" target="_blank" rel="noopener">07.19-07.25一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210802" target="_blank" rel="noopener">07.26-08.01一周小结</a></p><h2 id="2021年08月份毎周小结">2021年08月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210809" target="_blank" rel="noopener">08.02-08.08一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210816" target="_blank" rel="noopener">08.09-08.15一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210823" target="_blank" rel="noopener">08.16-08.22一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210830" target="_blank" rel="noopener">08.23-08.29一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210906" target="_blank" rel="noopener">08.30-09.05一周小结</a></p><h2 id="2021年09月份毎周小结">2021年09月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20210913" target="_blank" rel="noopener">09.06-09.12一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210920" target="_blank" rel="noopener">09.13-09.19一周小结</a></p><p><a href="https://mp.csdn.net/poster/20210927" target="_blank" rel="noopener">09.20-09.26一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211004" target="_blank" rel="noopener">09.27-10.03一周小结</a></p><h2 id="2021年10月份毎周小结">2021年10月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20211011" target="_blank" rel="noopener">10.04-10.10一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211018" target="_blank" rel="noopener">10.11-10.17一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211025" target="_blank" rel="noopener">10.18-10.24一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211101" target="_blank" rel="noopener">10.25-10.31一周小结</a></p><h2 id="2021年11月份毎周小结">2021年11月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20211108" target="_blank" rel="noopener">11.01-11.07一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211115" target="_blank" rel="noopener">11.08-11.14一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211122" target="_blank" rel="noopener">11.15-11.21一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211129" target="_blank" rel="noopener">11.22-11.28一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211206" target="_blank" rel="noopener">11.29-12.05一周小结</a></p><h2 id="2021年12月份毎周小结">2021年12月份毎周小结</h2><p><a href="https://mp.csdn.net/poster/20211213" target="_blank" rel="noopener">12.06-12.12一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211220" target="_blank" rel="noopener">12.13-12.19一周小结</a></p><p><a href="https://mp.csdn.net/poster/20211227" target="_blank" rel="noopener">12.20-12.26一周小结</a></p><p><a href="https://mp.csdn.net/poster/20220103" target="_blank" rel="noopener">12.27-01.02一周小结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;叮！你的【CSDN一周小结】新鲜出炉~&lt;br&gt;
一周结束了，CSDN为你整理了好了本周小结，点击查看本周的【用户数据详情】，快去秀出你的战绩！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CSDN用户每周一会收到一个上周数据汇总的消息推送：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210718143025546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTI4NzI2MA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具/资源" scheme="https://yansheng836.github.io/tags/tool-resource/"/>
    
  </entry>
  
</feed>
